Option Compare Database
Option Explicit

Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal Hwnd As Long) As Long
Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Long) As Long
Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags&, ByVal dwBytes As Long) As Long
Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
Declare PtrSafe Function GlobalSize Lib "kernel32" (ByVal hMem As Long) As Long
Declare PtrSafe Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long

Public Const GHND = &H42
Public Const CF_TEXT = 1
Public Const MAXSIZE = 40096  'Ursprünglicher Wert 40096

Function ClipBoard_GetData()
   Dim hClipMemory As Long
   Dim lpClipMemory As Long
   Dim MyString As String
   Dim RetVal As Long

   If OpenClipboard(0&) = 0 Then
      MsgBox "Zwischenablage kann nicht geöffnet werden, " _
      & "eventuell durch andere Anwendung geöffnet."
      Exit Function
   End If
         
   ' Handle zum globalen Speicherblock beschaffen,
   ' der auf den Text verweist.
   hClipMemory = GetClipboardData(CF_TEXT)
   If IsNull(hClipMemory) Then
      MsgBox "Speicher konnte nicht zugewiesen werden"
      GoTo OutOfHere
   End If

   ' Zwischenablagespeicher sperren, damit
   ' auf die Zeichenfolge verwiesen werden kann.
   lpClipMemory = GlobalLock(hClipMemory)

   If Not IsNull(lpClipMemory) Then
      MyString = Space$(MAXSIZE)
      RetVal = lstrcpy(MyString, lpClipMemory)
      RetVal = GlobalUnlock(hClipMemory)
      
      ' Peel off the null terminating character.
      If InStr(1, MyString, Chr$(0), 0) > 0 Then
        MyString = Mid(MyString, 1, InStr(1, MyString, Chr$(0), 0) - 1)
      Else
        MsgBox ("Es kann nicht die ganze Zwischenablage eingelesen werden!")
      End If
   Else
      MsgBox "Speicher, aus dem Zeichenfolge kopiert werden soll, konnte" _
      & "nicht gesperrt werden."
   End If

OutOfHere:

   RetVal = CloseClipboard()
   ClipBoard_GetData = MyString

End Function


Public Function funZASE(sGruppe As String, lProNr As Long, lArt As Long)
'lart gibt an ob 1= Zwischenablage kommt von Stückliste
'2= Zwischenablage kommt von ASM Eigenschaften der Vorkommnisse
'3= kommt von einer Materialliste im .ASM erzeugt mit der PSArtikel.exe

Dim z1 As Long
Dim sP1 As String 'Speicher für 1 Zeichen
Dim sP2 As String 'Speicher für komplette Zeichen
Dim Sp3 As String 'Speicher für Zeichen 1 einheit Nr Name oder Stück
Dim sp4 As String
Dim spZW As String ' Speicher Zwischenablage
Dim z2 As Long
Dim z3 As Long
Dim z4 As Long
Dim z5 As Long
Dim ok_ As Boolean
Dim ok2 As Boolean
Dim lZeile As Long
Dim sZeile As String
Dim lStart As Long
Dim zPosNr As Long
Dim zStck As Long
Dim varTab(400, 7) As String
Dim za(4) As String
Dim lvarNr As Long


Dim rs1 As DAO.Recordset

'Hallo Das Programm soll die Stückliste von Solid Edge einlesen wenn diese mit Text kopieren kopiert wird
' Die Stückliste muss sein Pos.Nummer | Menge | Dateiname
' Der Dateiname ist ein .Par oder ein.ASM oder ein.PSM oder ein .
'gesucht wird nach dem ASC Code 9 und 10 die Daten werden in die Tabelle t_ExternSE gespeichert
'9 separriert die Felder 10 separiert die Zeilen

'Pos.Nr.Menge Dateiname
'1   1   20654.par
'2   4   20822.par
'3   1   20659.par
'4   13  20658.par
'5   2   20871.par
'6   10  20870.par

lArt = 3 'Das ist die Solid Edge Version Darauf achten das kein leeres Solid Edge offen ist


Set rs1 = CurrentDb.OpenRecordset("SELECT * FROM t_ExternSE WHERE 1=0")

 
  spZW = ClipBoard_GetData()
  Debug.Print spZW  'Druckt die Zwischenablage
  If spZW = "" Then
        MsgBox LA("Es befindet sich nichts in der Zwischenablage!")
        Exit Function
  End If
  lvarNr = 0
  'Suche in der ersten Zeile nach den überschriften
  z2 = InStr(1, spZW, Chr(10))
  If z2 = 0 Then 'Kein Endzeichen wurde gefunden
    MsgBox ("Die Zwischenablage enthält keine gültigen Daten(kein Endzeichen).")
    Exit Function
  End If
  If lArt = 1 Or lArt = 2 Then
         If InStr(1, Mid(spZW, 1), Chr(9)) = 0 Then
           MsgBox ("Die Zwischenablage enthält keine gültigen Felder.")
           Exit Function
         End If
         
         MsgBox Mid(spZW, 1, z2) 'gibt zur Info die erste Zeile aus
         
         z5 = 1 'Startposition zum auslesen
         lZeile = 0
         While ok2 = False
           z2 = InStr(z5, spZW, Chr(10))
           If z2 = 0 Then
               ok2 = True
           Else
               sP1 = Mid(spZW, z5, z2 - z5 + 1) 'Die eigentliche Zeile
               Debug.Print funShowASC9(sP1)
               lZeile = lZeile + 1
               z1 = 1
               ok_ = False
               lvarNr = 0
               z4 = 1
               While ok_ = False   'es wird die erste Zeile durchsucht
                
                   
               
                   z3 = InStr(z4, sP1, Chr(9)) 'Ein Endzeichen für die Spalte gefunden
                   
                   If z3 <> 0 Then
                       lvarNr = lvarNr + 1   'entspricht der Spalte
                       varTab(lZeile, lvarNr) = Mid(sP1, z4, z3 - z4)
                       z4 = z3 + 1 'Merke letzte Endposition
                       'Debug.Print varTab(lZeile, lvarNr)
                   Else
                       z3 = InStr(z4, sP1, Chr(10)) 'WENN KEINE (9) nochmal auf die (10) prüfen Endzeichen für die Zeile
                       If z3 <> 0 Then
                           lvarNr = lvarNr + 1
                           varTab(lZeile, lvarNr) = Mid(sP1, z4, z3 - z4)
                           z4 = z3 + 1 'Merke letzte Endposition
                           'Debug.Print varTab(lZeile, lvarNr)
                       End If
                   Debug.Print varTab(lZeile, 1), varTab(lZeile, 2), varTab(lZeile, 3)
                       ok_ = True
                   End If
               Wend  'Spalte
           End If
               z5 = z2 + 1 'Merke das letzte Zeilenende + 1 Zeichen
        Wend 'Zeile
    End If   'Ende if lart =1 or lart=2
    
    
    '4 übernimmt Daten aus dem ASm zu erreichen über [Extras/Auszuge/Mengenübersicht-Stückliste] dann von der Zwischeablage
     If lArt = 4 Then
         If InStr(1, Mid(spZW, 1), Chr(9)) = 0 Then
           MsgBox ("Die Zwischenablage enthält keine gültigen Felder.")
           Exit Function
         End If
         
         'MsgBox MID(spZW, 1, z2) 'gibt zur Info die erste Zeile aus
         
         z5 = 3 'Startposition zum auslesen Die ersten beiden zeilen sind überschriften
         lZeile = 0
         While ok2 = False
           z2 = InStr(z5, spZW, Chr(10))
           If z2 = 0 Then
               ok2 = True   'Hier ist das Ende
           Else
               sP1 = Mid(spZW, z5, z2 - z5 + 1) 'Die eigentliche Zeile
               'Debug.Print funShowASC9(Sp1)
               lZeile = lZeile + 1
               z1 = 1
               ok_ = False
               lvarNr = 0
               z4 = 1
               While ok_ = False   'es wird die erste Zeile durchsucht
               
                   'ZA() = Split(Sp1, Chr(9))
               
                   z3 = InStr(z4, sP1, Chr(9)) 'Ein Endzeichen für die Spalte gefunden
                   If z3 <> 0 Then
                       lvarNr = lvarNr + 1   'entspricht der Spalte
                       varTab(lZeile, lvarNr) = Mid(sP1, z4, z3 - z4)
                       z4 = z3 + 1 'Merke letzte Endposition
                       'Debug.Print varTab(lZeile, lvarNr)
                   Else
                       z3 = InStr(z4, sP1, Chr(10)) 'WENN KEINE (9) nochmal auf die (10) prüfen Endzeichen für die Zeile
                       If z3 <> 0 Then
                           lvarNr = lvarNr + 1
                           varTab(lZeile, lvarNr) = Mid(sP1, z4, z3 - z4)
                           z4 = z3 + 1 'Merke letzte Endposition
                           'Debug.Print varTab(lZeile, lvarNr)
                       End If
                   Debug.Print varTab(lZeile, 1), varTab(lZeile, 2), varTab(lZeile, 3)
                       ok_ = True
                   End If
               Wend  'Spalte
           End If
               z5 = z2 + 1 'Merke das letzte Zeilenende + 1 Zeichen
        Wend 'Zeile
    End If   'Ende if lart =1 or lart=2
    
    
    
    
    
    If lArt = 3 Then
    'Diese Auswahl geht davon aus das die Zwischenablage von dem VB Programm PAArtikel kommt
    'Es wird aus dem ASM eine Einkaufsliste direkt im Solid Edge erstellt dafür ist kein Draft notwendig
    'Der Austausch der Daten erfolgt über die Zwischenablage
    
    'Ablauf
    'Einlesen der Tabelle suche nach Artikelnummer
      If Mid(spZW, 1, 10) <> "PSPartList" Then
           MsgBox ("Die Zwischenablage enthält keine gültigen Felder.")
           Exit Function
      End If
         
         MsgBox Mid(spZW, 1, z2) 'gibt zur Info die erste Zeile aus
         
         z5 = 1 'Startposition zum auslesen
         lZeile = 0
         While ok2 = False
           z2 = InStr(z5, spZW, Chr(10))  'Sucht das Endzeichen in der Zeile
           If z2 = 0 Then
               ok2 = True   ' Ende gefunden beenden
           Else
               sP1 = Mid(spZW, z5, z2 - z5 + 1) 'Die eigentliche Zeile einlesen
              ' Debug.Print Sp1
               lZeile = lZeile + 1
               
               varTab(lZeile, 1) = Mid(sP1, 8, 15) 'Dateiname
               varTab(lZeile, 2) = Val(Mid(sP1, 8, 15))   'Artikel Nr
               varTab(lZeile, 3) = Val(Mid(sP1, 30))   'Menge
               
Debug.Print varTab(lZeile, 1), varTab(lZeile, 2), varTab(lZeile, 3)
           End If
               z5 = z2 + 1 'Merke das letzte Zeilenende + 1 Zeichen
        Wend 'Zeile
    
    
    
    
    
    End If 'lart=3
        
        
Set rs1 = CurrentDb.OpenRecordset("t_ExternSE")
        
If lArt = 1 Then
    For z1 = 2 To lZeile
        rs1.AddNew
            rs1!SEProjekt = lProNr
            rs1!SEPosNr = Val(varTab(z1, 1))
            rs1!SEMenge = Val(varTab(z1, 2))
            rs1!SEDateiname = varTab(z1, 3)
            rs1!SELieferant = varTab(z1, 4)
            rs1!SEBemerkung = varTab(z1, 6)
        rs1.Update
    Next z1
End If



If lArt = 2 Then 'Eigenschaften der Vorkommnisse
    For z1 = 1 To lZeile
        rs1.AddNew
            
            rs1!SEProjekt = lProNr
            rs1!SEPosNr = z1
            rs1!SEMenge = 0
            rs1!SEDateiname = varTab(z1, 1)
            rs1!SELieferant = varTab(z1, 2)
            rs1!SEBemerkung = varTab(z1, 3)
        rs1.Update
    Next z1
End If

If lArt = 3 Then 'trift zu wenn die Daten von PSArtikel direkt aus dem ASM kommen
    For z1 = 7 To lZeile 'Der Start ist da wo die sinnvollen Werte anfangen
        
        If InStr(1, varTab(z1, 1), "_") = 0 Then  'Sorgt dafür das Dateinamen mit '_' ausgeschlossen werden
            rs1.AddNew
                
                rs1!SEProjekt = lProNr
                'rs1!SEPosNr = z1
                rs1!SEGruppe = sGruppe
                rs1!SEMenge = varTab(z1, 3)
                rs1!SEDateiname = varTab(z1, 1)
                rs1!SE_ArtikelNr = Val(varTab(z1, 2))
                'rs1!SELieferant = varTab(z1, 2)
                'rs1!SEBemerkung =""
            rs1.Update
       End If
    Next z1
End If



    rs1.Close
    Set rs1 = Nothing
    
        'Die gefundenen spalten werden angezeigt
'    MsgBox "Nachfolgend die einzelnen Spalten:" & vbCrLf & _
'        "1)" & varTab(1, 1) & vbCrLf & _
'        "2)" & varTab(1, 2) & vbCrLf & _
'        "3)" & varTab(1, 3) & vbCrLf & _
'        "4)" & varTab(1, 4) & vbCrLf & _
'        "5)" & varTab(1, 5)
'

End Function




Function funShowASC9(s1 As String) As String
Dim z1 As Long
Dim s2 As String

For z1 = 1 To Len(s1)
Select Case Asc(Mid(s1, z1, 1))
    
    Case 9
        s2 = s2 & "*"
    Case 10
        s2 = s2 & "#"
    Case Else
        s2 = s2 & Mid(s1, z1, 1)
End Select
    
    
Next z1


 funShowASC9 = s2


End Function

Public Function funZaGleo(sGruppe As String, lProNr As Long)
'Liest die Daten von Gleo aus der Zwischenablage und macht diese für Excel verfügbar gleichzeitig Eintrag in die Stunden
'Für ein Projekt

'Test funzagleo "Test",1
Dim z1 As Long
Dim sP1 As String 'Speicher für 1 Zeichen
Dim sP2 As String 'Speicher für komplette Zeichen
Dim Sp3 As String 'Speicher für Zeichen 1 einheit Nr Name oder Stück
Dim sp4 As String
Dim spZW As String ' Speicher Zwischenablage
Dim z2 As Long
Dim z3 As Long
Dim z4 As Long
Dim z5 As Long
Dim ok_ As Boolean
Dim ok2 As Boolean
Dim lZeile As Long
Dim sZeile As String
Dim lStart As Long
Dim zPosNr As Long
Dim zStck As Long
Dim varTab(400, 11) As String
Dim lvarNr As Long


Dim rs1 As DAO.Recordset

'1) Das Programm liest die Arbeitsstunden aus der Zwischenablage.
'2) und Trägt die daten in die Arbeitstabelle ein
'
' Die Stückliste muss sein Pos.Nummer | Menge | Dateiname

'111123  786786  786
'Set rs1 = CurrentDb.OpenRecordset("SELECT * FROM t_ExternSE WHERE 1=0")

 
spZW = ClipBoard_GetData()
'Debug.Print spZW  'Druckt die Zwischenablage
If spZW = "" Then
      MsgBox LA("Die Daten müssen mit CTRL+C in die Zwischenablage kopiert werden.")
      Exit Function
End If
lvarNr = 0
'Suche in der ersten Zeile nach den überschriften
z2 = InStr(1, spZW, Chr(9) & Chr(9))
If z2 = 0 Then 'Kein Endzeichen wurde gefunden
  MsgBox ("Die Zwischenablage enthält keine gültigen Daten(kein Endzeichen).")
  Exit Function
End If


If InStr(1, Mid(spZW, 1), Chr(9)) = 0 Then
  MsgBox ("Die Zwischenablage enthält keine gültigen Felder.")
  Exit Function
End If
         
MsgBox Mid(spZW, 1, z2) 'gibt zur Info die erste Zeile aus

z5 = 1 'Startposition zum auslesen
lZeile = 0

'Es werden alle Zeilen der Zwischenablage durchlaufen Das Zeilenende is immer 09+09

While ok2 = False
    z2 = InStr(z5, spZW, Chr(9) & Chr(9))
    If z2 = 0 Then
        ok2 = True
    Else
        sP1 = Mid(spZW, z5, z2 - z5 + 1) 'Die eigentliche Zeile
        'Debug.Print funShowASC9(Sp1)
        lZeile = lZeile + 1
        z1 = 1
        ok_ = False
        lvarNr = 0
        z4 = 1
        While ok_ = False   'es wird die erste Zeile durchsucht
            z3 = InStr(z4, sP1, ";") 'Ein Endzeichen für die Spalte gefunden
            If z3 <> 0 And lvarNr < 11 Then 'Zeichen gefunden und nicht mehr wie 11 Spalten
                lvarNr = lvarNr + 1   'entspricht der Spalte
                If Mid(sP1, z3 - 1, 1) = ";" Then
                    varTab(lZeile, lvarNr) = "-"
                Else
                    varTab(lZeile, lvarNr) = Mid(sP1, z4, z3 - z4)
                End If
                z4 = z3 + 1 'Merke letzte Endposition
                'Debug.Print varTab(lZeile, lvarNr)
            Else
                z3 = InStr(z4, sP1, Chr(9)) 'WENN KEINE (9) nochmal auf die (10) prüfen Endzeichen für die Zeile
                If z3 <> 0 Then
                    lvarNr = lvarNr + 1
                    'varTab(lZeile, lvarNr) = MID(Sp1, z4, z3 - z4)
                    z4 = z3 + 1 'Merke letzte Endposition
                    'Debug.Print varTab(lZeile, lvarNr)
                End If
            
                ok_ = True
            End If
          Wend  'Spalte
      End If  'Z2=0
        z5 = z2 + 1 'Merke das letzte Zeilenende + 1 Zeichen
Wend 'OK2=False
    
If msgJaNein("Soll die vorhandene Tabelle gelöscht werden?") = True Then
    CurrentDb().Execute "DELETE FROM t_tempArbeit"
End If
        
        
Set rs1 = CurrentDb.OpenRecordset("SELECT * FROM t_tempArbeit WHERE FALSE")

For z1 = 2 To lZeile
    'Debug.Print varTab(z1, 4) & Chr(9) & MID(varTab(z1, 5), 1, 10) & Chr(9) & Format(Val(varTab(z1, 8)), "0.00")
    'rs1!ID
    rs1.AddNew
    rs1!ProjektNr = lProNr
    rs1!Bezeichnung = varTab(z1, 4)
    rs1!Datum = Nz(Mid(varTab(z1, 5), 1, 10))
    rs1!Dauer = Format(Val(varTab(z1, 8)), "0.00")
    rs1.Update

Next z1





rs1.Close
Set rs1 = Nothing
    
        'Die gefundenen spalten werden angezeigt
'    MsgBox "Nachfolgend die einzelnen Spalten:" & vbCrLf & _
'        "1)" & varTab(1, 1) & vbCrLf & _
'        "2)" & varTab(1, 2) & vbCrLf & _
'        "3)" & varTab(1, 3) & vbCrLf & _
'        "4)" & varTab(1, 4) & vbCrLf & _
'        "5)" & varTab(1, 5)
'

End Function