Option Compare Database
Option Explicit

'**************** Code Begin *******************
' This code was originally written by Dev Ashish.
' It is not to be altered or distributed,
' except as part of an application.
' You are free to use it in any application,
' provided the copyright notice is left unchanged.
'
' Code Courtesy of
' Dev Ashish
'
Private Declare PtrSafe Function apiExitWindowsEx Lib "user32" _
        Alias "ExitWindowsEx" _
        (ByVal uFlags As Long, ByVal dwReserved As Long) _
        As Long

Public Const EWX_FORCE = 4      'Forcibly terminates processes
                                'that do not respond.
Public Const EWX_LOGOFF = 0     'Terminates processes, then logs off.
Public Const EWX_SHUTDOWN = 1   'Powers the system off, if possible.
Public Const EWX_REBOOT = 2     'Reboots the system.
Public MenueID As Long


'Die nachfolgenden Funktionen sind für das Aufrufen von der PS Menüleiste

'Stellt ausgeblendetes Menü wieder her im Direktfenster eingeben
'Application. ("Menu Bar").Enabled = True
'DoCmd.ShowToolbar "Menu Bar", acToolbarYes


Function funMenueID(WERT As Long)
MenueID = WERT
End Function



Function funMenBeenden()
  Dim rs1, Rs2 As DAO.Recordset
  Dim lonNr As Long
  Dim StrNachname As String
  Dim strSql As String
  
  'on error Goto Err_

  'Wenn kein Benutzer angemeldet schließen
  If funBenutzerLevel = 0 Then
      VarNichtSchliessen = False
      DoCmd.quit
      Exit Function
  End If
  
  lonNr = Nz(Form_frmDatenbanknutzer.Nummer) 'aus dem Anmeldeformular wir die Nummer entnommen
    'Eintragen des Benutzers in die Tabelle tblLog zum auslogen
    strSql = "SELECT * FROM tblLog WHERE 1=0"
    Set rs1 = CurrentDbC.OpenRecordset(strSql) 'Öffne eine Tabelle
    rs1.AddNew 'erstelle einen neuen Datensatz
        rs1!BenutzerNr = lonNr
        rs1!Zeit = Now
        rs1!Status = "geht"
        rs1.Update
    rs1.Close
    Set rs1 = Nothing
    
    'StrNachname = Form_frmDatenbanknutzer.Datenbanknutzer  'funBenutzerKurzzeichen '
    strSql = "SELECT Nachname,Anwesend_syst FROM tblAdressenPersonal " & _
             "WHERE AdressNr = " & lonNr

    Set Rs2 = CurrentDbC.OpenRecordset(strSql)
    If Not Rs2.EOF Then
        Rs2.Edit      ' Tabelle zum ändern vorbereiten
        Rs2!Anwesend_syst = False 'Den Benutzer als abwesend eintragen
        Rs2.Update
    End If
    Rs2.Close
    Set Rs2 = Nothing
    
    'Es wird das Schließen der Software erlaubt
    VarNichtSchliessen = False
    'Menues werden eingeblendet um bei anderen Access Anwendungen benutzbar zu sein
    Call funMenMenEin
    'Wenn die Funktion von frmDatenbanknutzer aufgerufen wurde wird eine Rekursion verhindert
    If gloBolExit = False Then
        DoCmd.Close acForm, "frmDatenbanknutzer"
        DoCmd.quit 'Das Programm verlassen und Access schließen
    End If
Exit_:
    Exit Function
Err_:
    If Err.Number = "3043" Then
        MsgErr "modMenue", "funMenBeenden / Programm wird beendet.", Err.Description, Err.Number, Erl()
        DoCmd.quit
    End If
    MsgErr "modMenue", "funMenBeenden", Err.Description, Err.Number, Erl()
    Resume Exit_
End Function

'Öffnet die Kalkulationa
Function funMenProKalk(lProNr As Long)


Dim ProNr As Long
'on error Goto Err_


'Wenn die -67 übergeben wird soll die Software die im Startmenue angewählte Nummer verwenden
If lProNr = -67 Then
    lProNr = funProjektNummer
End If

ProNr = lProNr
VarNaviKalkUn = 0
'Auswahl der Projektnummer
'lonProjektnummer = ProNr

DoCmd.Close acForm, "frmProjektbeschreibungDokumente"
'Öffnet das dokument wenn gleiches Projekt
If MenFormularOpen("frmKalkulation") Or MenFormularOpen("frmProjektbeschreibungDokumente") Then
    'Öffnet das Formular Kalkulation
    If MenFormularOpen("frmKalkulation") Then
        If Nz(Forms!frmKalkulation!Projektnummer) = ProNr Then
            DoCmd.OpenForm "frmKalkulation", acNormal
        Else
            DoCmd.Close acForm, "frmKalkulation"
        End If
    End If
    
    'Öffnet das Formular Angebote
    If MenFormularOpen("frmProjektbeschreibungDokumente") Then
        If Nz(Forms!frmProjektbeschreibungDokumente!Projektnummer) = ProNr Then
            DoCmd.OpenForm "frmProjektbeschreibungDokumente", acNormal
        Else
            DoCmd.Close acForm, "frmProjektbeschreibungDokumente"
        End If
    End If
    Exit Function
End If
   
If ProNr <> 0 Then
   'Auswahl der Unternummer der Kalkulation
   DoCmd.OpenForm "NaviKalkulation", acNormal, , , , acDialog
   If VarNaviKalkUn <> 0 Then '[IF 1]
    ' aufrufen der Projektbeschreibung
    DoCmd.OpenForm "frmKalkulation"
  End If
End If

Exit Function
Err_:
    MsgErr "modMenue", "funMenProKalk", Err.Description, Err.Number, Erl()
End Function



Function funMenueAdressenAdressen()
'on error Goto Err_
    DoCmd.OpenForm ("frmAdressenuebersicht")
Exit Function
Err_:
    MsgErr "modMenue", "funMenueAdressenAdressen", Err.Description, Err.Number, Erl()
End Function

Function funMenTaetigkeiten()
    DoCmd.OpenForm "frmArbeiten"
End Function

Function funMenMitStamm()

    DoCmd.OpenForm "frmPersonal", , , "AdressNr = " & CStr(funBenutzerNr())
modRechte.funRecht ("Admin")

End Function

Function funMenAdressenTelefonliste()
DoCmd.OpenForm "frmTelefonliste"
End Function

Function funMenAdressenNeu()
If msgJaNein("Wollen Sie eine neue Adresse anlegen?") Then
    DoCmd.OpenForm "NaviNeueAdresse"
End If

End Function
Function funMenArtikelNeu()
DoCmd.OpenForm "NaviNeuerArtikelSchnell"
End Function


Function funMenInfoAlleDokumente()
DoCmd.OpenForm "frmDokuInfoAlle"
End Function

Function funMenProjektNeu()


  DoCmd.OpenForm "NaviNeuesProjekt"

 
End Function

Function funMenAccessEin()

'Menueleiste wird eingeschalten
Application.CommandBars("Menu Bar").Enabled = True
DoCmd.ShowToolbar "Menu Bar", acToolbarYes

End Function

Function funMenAdminMenueEin()
Dim cmb As CommandBar
Dim winpos As Boolean
    winpos = SizeAccessWindow(780, 1000)
    Application.CommandBars("Menu Bar").Enabled = True
    'Blendet alle Menüs ein
    For Each cmb In CommandBars
       cmb.Enabled = True
    Next

End Function

Function menAdressen() As Boolean
'Abfrage ob der Benutzer schon eingelogt ist
If Not IsNull(Forms![frmdatenbanknutzer]![Sicherheitslevel]) Then
    'Das Hauptmenü wird von der Funktionsleiste aufgerufen
     DoCmd.OpenForm "frmAdressenuebersicht"
     End If
              
End Function

Function menTaetigkeiten() As Boolean
'Abfrage ob der Benutzer schon eingelogt ist
If Not IsNull(Forms![frmdatenbanknutzer]![Sicherheitslevel]) Then
    'Das Hauptmenü wird von der Funktionsleiste aufgerufen
     DoCmd.OpenForm "frmArbeiterauswahl"
     End If
              
End Function



Sub winNebenAuswahl()
  'Schiebt das jeweils aktive Fenster neben die Auswahl
  'DoCmd.MoveSize 5000, 0
End Sub


Function fctPSNaviTel()
 DoCmd.OpenForm "frmTelefonliste"
End Function
Function fctPSNaviDrucker()
'on error Goto Err_fehler

   DoCmd.RunCommand 340 'acCmdPrint

Exit Function

Err_fehler:
  If Err.Number = 2501 Then
    MsgBox ("Sie haben den Druckprozess abgebrochen")
  Else
    MsgBox Err.Number & " " & Err.Description
  End If
End Function

Function funTasteZurueck(ZurueckNach As String, FormCloseName As String, Optional OpenArgs_ As String)
'Die Open Args können die Parameter für das zurück sein
'strOpenarg = Nz(txtOpenarg)

    If ZurueckNach = "" Then
        MsgBox ("Sie können nicht zurück")
    Else
        DoCmd.Close acForm, FormCloseName
        DoCmd.OpenForm (ZurueckNach), , , , , , OpenArgs_
    End If

End Function
'Die Adressen zum Projekt werden aufgerufen
Function funMenProAdr()
'on error Goto Err_
'lonProjektnummer = funProNr()
If funProjektNummer() <> 0 Then
    DoCmd.OpenForm "NaviProjektAdressen"
End If


'Listet alle Dokumente zum Projekt auf
End Function
Function funmenDzP()
'lonProjektnummer = funProNr()
If funProjektNummer() <> 0 Then
    DoCmd.OpenForm "frmDokuInfo"
End If
End Function

Function funMenAdr()
    DoCmd.OpenForm ("frmAdressenuebersicht")
End Function

Function funMenProStam(Optional Projektnummer As Long)
Dim ProNr As Long
   
'on error Goto Err_

funProNr

ProNr = funProjektNummer(Projektnummer)
'lonProjektnummer = ProNr

If ProNr <> 0 Then
    'Schließt eine eventuell offenes Dokument
    If MenFormularOpen("frmProjektbeschreibung") Then
        If ProNr <> Nz(Forms!frmProjektbeschreibung!ProjektNr) Then
            DoCmd.Close acForm, "frmProjektbeschreibung"
        End If
    End If
    DoCmd.OpenForm "frmProjektbeschreibung", , , "ProjektNr=" & ProNr
End If

End Function

Function funMenMenEin()
'erlaubt alle menues in Access
Dim cmb As CommandBar

    'winPos = SizeAccessWindow(780, 1000)
    Application.CommandBars("Menu Bar").Enabled = True
    'Blendet alle Menüs ein
    For Each cmb In CommandBars
       cmb.Enabled = True
    Next
'Call funMenDB

'Menueleiste wird eingeschalten
Application.CommandBars("Menu Bar").Enabled = True
DoCmd.ShowToolbar "Menu Bar", acToolbarYes
End Function

Function funMenMenAus()
Dim cmb As CommandBar
    'winPos = SizeAccessWindow(750, 1000)
    Application.CommandBars("Menu Bar").Enabled = False
    
    'Blendet alle Menüs ein
    For Each cmb In CommandBars
       cmb.Enabled = False
    Next
'Ausblenden des Datenbank Fensters
DoCmd.SelectObject acTable, , True
RunCommand 2  ' acCmdWindowHide

'Call funMenDB

End Function

Function funMenAnmelden()

If funBenutzerLevel <> 0 Then
    MsgBox ("Sie sind bereits angemeldet.Sie werden automatisch abgemeldet.")
    funMenAbmelden
    Exit Function
End If

DoCmd.Close acForm, "frmStartAuftrag"
DoCmd.OpenForm "frmDatenbanknutzer"
Forms!frmdatenbanknutzer!KennwortEingabe = ""

End Function

Function funMenAbmelden()
DoCmd.Close acForm, "frmStartAuftrag"
DoCmd.OpenForm "frmDatenbanknutzer"
Forms!frmdatenbanknutzer!KennwortEingabe = ""
Forms!frmdatenbanknutzer!Sicherheitslevel = 0
Forms!frmdatenbanknutzer!Nummer = ""
gloLonLevel = 0
'Call funMenDB


End Function

Function funMenEinkaufsListe(Optional ProNr_ As Long)
Dim ProNr As Long



If ProNr_ <> 0 Then
    ProNr = ProNr_
Else
    ProNr = funProjektNummer()
End If
'lonProjektnummer = ProNr

'Schließt eine eventuell offenen Stückliste
If MenFormularOpen("frmStueckliste") Then
    If ProNr <> Nz(Forms!frmStueckliste!var_Pnr) Then
        DoCmd.Close acForm, "frmStueckliste"
    End If
End If

If funStueckliste(ProNr) <> 0 Then '[IF 1]
   DoCmd.OpenForm "frmStueckliste", acNormal
End If '[If1]


End Function

Function funMenEinkaufsListe_Wcc(Optional ProNr_ As Long)
Dim ProNr As Long



If ProNr_ <> 0 Then
    ProNr = ProNr_
Else
    ProNr = funProjektNummer()
End If
'lonProjektnummer = ProNr

'Schließt eine eventuell offenen Stückliste
If MenFormularOpen("frmStueckliste_Wcc") Then
    If ProNr <> Nz(Forms!frmStueckliste_Wcc!var_Pnr) Then
        DoCmd.Close acForm, "frmStueckliste_Wcc"
    End If
End If

If funStueckliste(ProNr) <> 0 Then '[IF 1]
   DoCmd.OpenForm "frmStueckliste_Wcc", acNormal
End If '[If1]


End Function




Function funMenErsatzteilListe()
Dim rs1 As DAO.Recordset


    If funProNr() <> 0 Then '[IF 1]
    'Es wird nachgeschaut ob es schon eine Stückliste zu disem Projekt gibt
    Set rs1 = CurrentDbC.OpenRecordset("SELECT Projektnummer " & _
    "FROM tblStueckliste WHERE ((tblStueckliste.Projektnummer =" & funProNr() & "))")
        If rs1.EOF And rs1.BOF Then  '[IF 2]
            'Wenn kein Ordner anfragen ob Ordner erstellen
            MsgBox ("Sie müssen erst eine Stückliste erstellen," & vbCrLf & _
            "bevor Sie eine Ersatzteilliste bearbeiten können")
        Else
            DoCmd.OpenForm "frmErsatzteilliste", acNormal
        End If
    End If
    rs1.Close
    Set rs1 = Nothing

End Function

Function funMenOrdner()
Dim rs1 As DAO.Recordset
Dim ProNr As Long

ProNr = funProjektNummer()
'lonProjektnummer = ProNr

'DoCmd.OpenForm "NaviProjektAuswahl", acNormal, , , , acDialog
If ProNr <> 0 Then '[IF 1]
    'Es wird nachgeschaut ob es schon einen Ordner gibt zu dem Projekt
    Set rs1 = CurrentDbC.OpenRecordset("SELECT Projektnummer " & _
    "FROM tblOrdner WHERE (((tblOrdner.Projektnummer) =" & ProNr & "))")
    If rs1.RecordCount <> 0 Then '[IF 2]
        'Öffnet das Formular wenn der Ordner vorhanden ist
        DoCmd.OpenForm "frmOrdner"
    Else
        'Wenn kein Ordner anfragen ob Ordner erstellen
        If modAbfrage("Wollen Sie einen Ordner zu dem Projekt " & ProNr & " anlegen?") Then '[IF 3]
            'Es wird ein neuer Datensatz mit einer neuen Dokumentnummer erstellt
            Set rs1 = CurrentDbC.OpenRecordset("tblOrdner")
            rs1.AddNew    'Neuen Datensatz anlegen
            rs1!Projektnummer = ProNr
            rs1!OrdnerBezeichnung = "#Neu#"
            rs1.Update
            'Öffnet den Ordner nach dem anlegen
            DoCmd.OpenForm "frmOrdner"
        End If '[IF 3]
    End If '[IF 2]
    rs1.Close
    Set rs1 = Nothing
End If '[IF 1]

End Function

Function funMenNeuerAuftrag()
' Neuen Auftrag anlegen
Dim lonProNr As Long
Dim lAuftrag As Long

'Projektnummer laden und prüfen
lonProNr = funProNr()
If lonProNr < 1 Then
    Exit Function
End If
'Abfrage ob zu diesem Projekt Auftrag
If PS.Auftrag.zumProjekt(lonProNr, True) = True Then
    Exit Function
End If
    
'Auftrag neu
lAuftrag = PS.Auftrag.Neu(lonProNr)
If lAuftrag < 1 Then
    Exit Function
End If

'Öffne neuen Auftrag
DoCmd.OpenForm "frmAufDaten", , , , , , "Auf" & lAuftrag

'gloAuftragsNummer = SpId
                  
'restliches Zeug was so einfällt
Form_frmStartAuftrag.varInfo_DblClick 1
Form_frmStartAuftrag.varAuftrag = lAuftrag


End Function



Function funMenAuftragBearbeiten()
If funAufNr() <> 0 Then
   DoCmd.OpenForm "frmAufDaten", acNormal, , , , , "Auf" & funAufNr() ' "tblaufDaten.ID =" & funAufNr()
End If
End Function

Function funMenAuftragsdokumente()
Dim lonSp1 As Long

lonSp1 = funAufNr()
If lonSp1 <> 0 Then
   DoCmd.OpenForm "frmAuftragAlleDokumente", , , , , , "Auf" & lonSp1
End If

End Function

Function funMenAlleAuftraege(Optional strOpenArgs As String)
    DoCmd.OpenForm "frmAufAlle", acNormal, , , , , Nz(strOpenArgs)
End Function

Function funMenProjektAuftragsDokumente(Optional strOpenArgs As String)
Dim ProNr As Long
ProNr = funProNr
If funAufNr() <> 0 Then
   DoCmd.OpenForm "frmAuftragAlleDokumente", acNormal, , , , , Nz(strOpenArgs)
End If
End Function

Function funAufProUebersicht(Optional strOpenArgs As String)
Dim ProNr As Long
ProNr = funProNr
If ProNr <> 0 Then
   DoCmd.OpenForm "frmAufProUebersicht", acNormal, , , , , Nz(strOpenArgs)
End If
End Function


Function funMenAB()

DoCmd.OpenForm "NaviAufDokNeu", , , , , , "Auftragsbestätigung"

'
'Dim lonAufNr As Long
'lonAufNr = funAufNr()
'If lonAufNr <> 0 Then
'  'Öffne den Auftrag mit der Nummer
'  Select Case MsgBox(LA("Wollen Sie zu dem Auftrag :") & Str(lonAufNr) _
'                       & vbCrLf & LA("eine Auftragsbestätigung erstellen?") _
'                       , vbYesNo + vbQuestion + vbDefaultButton2, LA("Sicherheitsabfrage"))
'  Case vbYes
'
'       lonBelegnummer = PS.Auftrag.Neu_Dokument(lonAufNr, DokType.tyAuftragsbestaetigung)
'       If lonBelegnummer <> 0 Then
'         'Öffne das Formular Auftragsdokumente
'         DoCmd.OpenForm "frmAufDokumente", , , , , , "Dok" & lonBelegnummer
'       End If
'  Case vbNo
'       Exit Function
'  End Select
'End If

End Function

Function funMenRechnung()
Dim lonAufNr As Long
lonAufNr = funAufNr()
'den kompletten Auftrag
'Einzelpositionen dann über Auftrag oder Kalkulation
'Vorhandenes Dokument kopieren

'Ein Navi Form das die Auswahl zur Verfügung stellt anstelle der MSGBOX
'Stop
DoCmd.OpenForm "NaviAufDokNeu", , , , , , "Rechnung"


End Function
Function funMenProRechnung()
'#######################################################################
'erstellt Projektbezogenen Rechnung ohne einen Auftrag
'#######################################################################

Dim lonProNr As Long
lonProNr = funProjektNummer()

If lonProNr <> 0 Then
    'Sicherheitsabfrage ob wirklich
    Select Case MsgBox("Wollen Sie zu dem Projekt :" & Str(lonProNr) _
                       & vbCrLf & "eine Rechnung erstellen?" _
                       , vbYesNo + vbQuestion + vbDefaultButton2, "Sicherheitsabfrage")
    Case vbYes
       lonBelegnummer = Neues_Pro_Dokument(lonProNr, "RE")
       If lonBelegnummer <> 0 Then
            'Öffne das Formular Auftragsdokumente
            DoCmd.OpenForm "frmProDokumente", , , "Such_=" & lonBelegnummer
       End If
    Case vbNo
       Exit Function
    End Select
End If
End Function


Function funMenLieferschein()

DoCmd.OpenForm "NaviAufDokNeu", , , , , , "Lieferschein"

'Dim lonAufNr As Long
'Dim Dokumentnummer As Long
'lonAufNr = funAufNr()
'If lonAufNr <> 0 Then
'  'Öffne den Auftrag mit der Nummer
'  Select Case MsgBox("Wollen Sie zu dem Auftrag :" & Str(lonAufNr) _
'                       & vbCrLf & "einen Lieferschein erstellen?" _
'                       , vbYesNo + vbQuestion + vbDefaultButton2, "Sicherheitsabfrage")
'  Case vbYes
'        Dokumentnummer = PS.Auftrag.Neu_Dokument(lonAufNr, tyLieferschein)
'        If Dokumentnummer <> 0 Then
'            'Öffne das Formular Auftragsdokumente
'            DoCmd.OpenForm "frmAufDokumente", , , , , , "Dok" & Dokumentnummer
'        End If
'  Case vbNo
'       Exit Function
'  End Select
'End If
End Function
Function funMenLiquiPlanung()
'DoCmd.OpenForm "frmLiquiPlanung"

End Function



Function funMenGutschrift()

DoCmd.OpenForm "NaviAufDokNeu", , , , , , "Gutschrift"

'Dim lonAufNr As Long
'lonAufNr = funAufNr()
'
'If lonAufNr <> 0 Then
'    'Öffne den Auftrag mit der Nummer
'    Select Case MsgBox("Wollen Sie zu dem Auftrag :" & Str(lonAufNr) _
'                       & vbCrLf & "eine Gutschrift erstellen?" _
'                       , vbYesNo + vbQuestion + vbDefaultButton2, "Sicherheitsabfrage")
'    Case vbYes
'       lonBelegnummer = PS.Auftrag.Neu_Dokument(lonAufNr, tyGutschrift)
'       If lonBelegnummer <> 0 Then
'            'Öffne das Formular Auftragsdokumente
'            DoCmd.OpenForm "frmAufDokumente", , , , , , "dok" & lonBelegnummer
'       End If
'    Case vbNo
'       Exit Function
'    End Select
'End If
End Function





Function funAufNr() As Long
Dim lonSp1

If gloAuftragsNummer = 0 And MenFormularOpen("frmStartAuftrag") Then
    lonSp1 = Nz(Form_frmStartAuftrag.varAuftrag, 0)
    gloAuftragsNummer = lonSp1 'Wenn Globale Variable zerstört hier wir wieder alles gut
Else
    lonSp1 = gloAuftragsNummer
End If

If lonSp1 = 0 Then
    funAufNr = 0
    MsgBox ("Sie haben keinen Auftrag ausgewählt!")
Else
    funAufNr = lonSp1
End If
End Function



'---------------------------------------------------------------------------------------
' Function  : Erzeugt ein neues dokument Projektbasierend
'             und gibt die Nr des erzeugten Dokumentes zurück
' DateTime  : 01.12.2008 12:12
' Author    : mg
' Purpose   : Ein neues Dokument wird angelegt P_Da = AB (Auftragsbestätigung)
'                                              P_DA = RE (Rechnung)
'                                              P_DA = Li (Lieferschein)
'                                              P_DA = Gu (Gutschrift)
'---------------------------------------------------------------------------------------
Function Neues_Pro_Dokument(P_Pro_Nr As Long, P_DA As String) As Long
Dim rs1 As DAO.Recordset
Dim Rs2 As DAO.Recordset
Dim sSql As String
Dim BN As Long    ' Zwischenspeicher Belegnummer
Dim ReBe As Single 'Zwischenspeicher Rechnungsbetrag
Dim lonReNr As Long 'Speichert die letzte Rechnungsnummer

''on error Goto Neues_Auf_Dokument_Error
'Suche letzte Rechnungsnummer
If P_DA = "RE" Or P_DA = "Gu" Then
    Set rs1 = CurrentDbC.OpenRecordset("SELECT TOP 1 tblRechnung.reBelegNr2 " & _
    "FROM tblRechnung " & _
    "ORDER BY tblRechnung.reBelegNr2 DESC;")
    'Wenn noch keine Rechnung vorhanden ist Startnummer fragen
    If rs1.RecordCount <> 1 Then
        lonReNr = Val(InputBox("Bitte geben Sie die Startnummer der Rechnungen ein. Die Nummer lauttet 20040001 für die erste Rechnung im Jahr 2004.", "Eingabe der Startrechnungsnummer", "20040001"))
    Else
        'Wenn Rechnung vorhanden Rechnungsnummer auf addieren
        lonReNr = rs1!ReBelegNr2 + 1
    End If
End If




  'Sucht den Datensatz mit der Projektnummer
  Set Rs2 = CurrentDbC.OpenRecordset("SELECT tblProjekte.ProjektNr, tblProjekte.Projektbezeichnung, tblAdressen.* " & _
            "FROM tblAdressen INNER JOIN tblProjekte ON tblAdressen.AdressNr = tblProjekte.AdressNr " & _
            "WHERE (((tblProjekte.ProjektNr)=" & Str(P_Pro_Nr) & "));")
    sSql = "SELECT * FROM tblAnschreiben WHERE False"
    Set rs1 = CurrentDbC.OpenRecordset(sSql)
    rs1.AddNew    'Neuen Datensatz anlegen
     
    'Allgemeine Einträge für alles gültig
    rs1!Kurzzeichenersteller = PS.User.Kurzzeichen()
    
    rs1!Projektnummer = P_Pro_Nr
    rs1!Formulartype = "frmProDokumente"
    'Höchste Nr Suchen oder Vorgabewert
    BN = funLetzteDatensatzNr("tblAnschreiben", "BelegNr")
    rs1!BelegNr = BN
    rs1!Belegbezeichnung = CStr(P_Pro_Nr) & "-" & CStr(BN) & "-" & PS.User.Kurzzeichen()
    rs1!Kopftext = ""
    rs1![Textstück] = ""
  
 'spezielle Einräge für die Dokument
Select Case P_DA
    Case "AB"    ' Auftragsbestätigung
        rs1!BelegArt = "-Auftragsbestätigung"
        rs1!Betreff = "AB-" & Rs2!AufBezeichnung
        rs1!Adressnummer = Rs2!AdressNr
        rs1!Rufname = Rs2!Rufname
        rs1!Adresse1 = Rs2!Adresse1
        rs1!Adresse2 = Rs2!Adresse2
        rs1!Adresse3 = Rs2!Adresse3
        rs1![Strasse] = Rs2!Strasse
        rs1!Land = Rs2!Land
        rs1!PLZ = Rs2!PLZ
        rs1!Ort = Rs2!Ort
        rs1!Waehrung = funDbText(5, "Waehrung")
        rs1.Update
        rs1.Close
        Set rs1 = Nothing
        Rs2.Close
        Set Rs2 = Nothing

    Case "RE"    ' Rechnung
        rs1!BelegArt = "-Rechnung"
        'rs1!BelegNr2 = lonReNr
        'rs1!BelegArt = 1
            rs1!Betreff = "RE-" + Rs2!Projektbezeichnung
            rs1!Rufname = Rs2!Rufname
            rs1!Adressnummer = Rs2!AdressNr
            rs1!Adresse1 = Rs2!Adresse1
            rs1!Adresse2 = Rs2!Adresse2
            rs1!Adresse3 = Rs2!Adresse3
            rs1!Strasse = Rs2!Strasse
            rs1!Land = Rs2!Land
            rs1!PLZ = Rs2!PLZ
            rs1!Ort = Rs2!Ort
        rs1.Update
        rs1.Close
        Rs2.Close
        
        'Die Rechnung wird in der Tabelle Rechnunng angelegt
        sSql = "SELECT * FROM tblRechnung WHERE FALSE"
        Set rs1 = CurrentDbC.OpenRecordset(sSql)
        If rs1.Updatable Then
            rs1.AddNew    'Neuen Datensatz anlegen
            rs1!BelegNr = BN
            rs1!ReBelegNr2 = lonReNr 'Fortlaufende Rechnungsnummer
            rs1!ReBelegart = 1 '1 ist Rechnung
            rs1!AufNr = 0
            rs1!ProjekktNr = P_Pro_Nr
            rs1!AngelegtVon = funBenutzerKurzzeichen
            rs1!AngelegtAm = Date
            'rs1!SummeWert = ReBe   'Der Wert des Auftrages wird zur Rechnung übertragen
            
        '#### vorbelegten Textfelder
            rs1!SummeText = funDbText(5, "SummeText")
            rs1!MwstText = funDbText(5, "MwstText")
            rs1!AuftragnettoText = funDbText(5, "SummeText")
            rs1!BereitsBezahltText = funDbText(5, "BereitsBezahltText")
            rs1!ZuZahlenderBetragText = funDbText(5, "ZuZahlenderBetragText")
            rs1!RechnungsbetragText = funDbText(5, "RechnungsbetragText")
            rs1!MwstWert = Val(funDbText(5, "MwstWert"))
            rs1!Zahlungsbedingungen = funDbText(5, "Zahlungsbedingungen")
            rs1!Waehrung = funDbText(5, "Waehrung")
        '#### vorbelegten Textfelder
            rs1.Update
            rs1.Close
            Set rs1 = Nothing
        End If
                            
    Case "Li"   'Lieferschein
            rs1!BelegArt = "-Lieferschein"
            rs1!Betreff = "Li-" & Rs2!AufBezeichnung
            rs1!Rufname = Rs2!Rufname
            rs1!Adressnummer = Rs2!AdressNr
            rs1!Adresse1 = Rs2!Adresse1
            rs1!Adresse2 = Rs2!Adresse1
            rs1!Adresse3 = Rs2!Adresse1
            rs1![Strasse] = Rs2!Strasse
            rs1!Land = Rs2!Land
            rs1!PLZ = Rs2!PLZ
            rs1!Ort = Rs2!Ort
            rs1.Update
            rs1.Close
            Set rs1 = Nothing
            Rs2.Close
            Set Rs2 = Nothing
    Case "Gu"  'Gutschrift
            rs1.Update
            rs1.Close
            Set rs1 = Nothing
        
End Select
' ###########  für Projektdokument keine Daten übernehmen extra Auswahl
'nach dem Erstellen einer Gutschrift Funktion verlassen
If P_DA = "Gu" Then GoTo Ende_



'Sprungmarke wenn keine Positionen angelegt werden
Ende_:

'zuweisen der Belegnummer zur Globalen Variablen
Neues_Pro_Dokument = BN
'on error Goto 0
Exit Function
Neues_Auf_Dokument_Error:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure Neues_Auf_Dokument of VBA Dokument Form_NaviAuftrag"
End Function

Function menFunKurzbrief()
Dim stLinkCriteria As String
Dim rs1 As DAO.Recordset
Dim BN As Long  ' Für die übergabe der Belegnummer
Dim ProNr As Long

'on error Goto Err_

ProNr = funProjektNummer()
'lonProjektnummer = ProNr

'Wenn das Formular schon im Hintergrund offen ist wird es nicht neu angelegt sondern geöffnet
If MenFormularOpen("frmKurzbrief") Then
  DoCmd.OpenForm "frmKurzbrief"
  Exit Function
End If

If ProNr <> 0 Then '[IF 1]
  'Anfang Abfrage neuer Text
  'Es wir abgefragt ob Sie wirklich einen neuen Text erstellen Wollen
  If modAbfrage("Wollen Sie zu dem Projekt " & vbCrLf & "P" & ProNr & vbCrLf & _
  "einen neuen Beleg erstellen ?") Then ' [IF 2] Aufruf der Funktion Abfrag gibt true zurück wenn ja
  
    'Es wird ein neuer Datensatz mit einer neuen Dokumentnummer erstellt
    Set rs1 = CurrentDbC.OpenRecordset("tblAnschreiben")
    rs1.AddNew    'Neuen Datensatz anlegen
    'rs1.MoveLast
    'lonProjektnummer = Me!ProjektNr 'Übernahme der Projektnummer für Auswahl
    rs1!Kurzzeichenersteller = funBenutzerKurzzeichen
    rs1!Projektnummer = funProjektNummer()
    rs1!Formulartype = "frmKurzbrief"
    'Höchste Nr Suchen oder Vorgabewert
    BN = funLetzteDatensatzNr("tblAnschreiben", "BelegNr")
    rs1!BelegNr = BN
    rs1.Update
    rs1.Close
    Set rs1 = Nothing
    'MsgBox ("Die Belegnummer ist: " + Str(lonProjektnummer) + "-" + Str(BN) + "-" + Forms![frmDatenbanknutzer]![Kurzzeichen])
    'zuweisen der Belegnummer zur Globalen Variablen
    lonBelegnummer = BN
    'Öffne das Formular Kurzbrief
    DoCmd.OpenForm "frmKurzbrief", , , stLinkCriteria
    DoCmd.Close acForm, "frmProjektübersicht"
  End If ' [IF 2]
Else
  MsgBox ("Sie müssen ein Projekt auswählen!")
End If ' [IF1]

Exit_:
    Exit Function
Err_:
    MsgBox Err.Description
    Resume Exit_
End Function


Function funMenPackliste()
Dim ProNr As Long

ProNr = funProjektNummer
'lonProjektnummer = ProNr

'Öffnet eine vorhandene Liste wenn im Hintergrund und das gleiche Projekt
If MenFormularOpen("frmPackKo") Then
    If Nz(Forms!frmPackko!Projektnummer) = ProNr Then
        DoCmd.OpenForm "frmPackKo", acNormal
        Exit Function
    Else
        DoCmd.Close acForm, "frmPackKo"
    End If
End If

If ProNr <> 0 Then
    'Öffne die Packlistenauswahl
    'DoCmd.OpenForm "Navipack", , , , , acDialog
    DoCmd.OpenForm "Navipack_aw", , , , , acDialog
End If

End Function

Function funMenAnfrag(Optional lonNr As Long)
Dim ProNr As Long
'on error Goto Err_
If Nz(lonNr) = 0 Then
    MsgBox (LA("Keine Projektnummer!"))
    Exit Function
End If
ProNr = funProjektNummer
'lonProjektnummer = ProNr
'Zeigt das geöffnete Dokument an wenn gleiches Projekt
If MenFormularOpen("frmAnfragenBestellungen") Then
    If Nz(Forms!frmAnfragenBestellungen!Projektnummer) = ProNr Then
        DoCmd.OpenForm "frmanfragenbestellungen", acNormal
        Exit Function
    Else
        DoCmd.Close acForm, "frmanfragenbestellungen"
    End If
End If
If ProNr <> 0 Then
    lonBelegnummer = 0
    'Auswahl der Unternummer der Kalkulation
    'DoCmd.OpenForm "NaviAnfrage", acNormal, , , , acDialog
    
        lonBelegnummer = funNeuerBeleg("Anfrage", "neu", ProNr, PS.User.Kurzzeichen(), 0)
    
    If lonBelegnummer <> 0 Then '[IF 1]
        ' aufrufen der Projektbeschreibung
        DoCmd.OpenForm "frmanfragenbestellungen", , , , , , "Dok" & lonBelegnummer
    End If
End If
Exit Function
Err_:
    MsgBox Err.Description
End Function

Function funMenBestellung(Optional lonNr As Long)
Dim ProNr As Long

If Nz(lonNr) = 0 Then
    ProNr = funProjektNummer
Else
    ProNr = lonNr
End If

'lonProjektnummer = ProNr
'Öffnet das dokument wenn gleiches Projekt
If MenFormularOpen("frmanfragenbestellungen") Then
    If Nz(Forms!frmAnfragenBestellungen!Projektnummer) = ProNr Then
        DoCmd.OpenForm "frmanfragenbestellungen", acNormal
        Exit Function
    Else
        DoCmd.Close acForm, "frmanfragenbestellungen"
    End If
End If
If ProNr <> 0 Then
    lonBelegnummer = 0
    'Auswahl der Unternummer der Kalkulation
    DoCmd.OpenForm "NaviBestellung", acNormal, , , , acDialog
    If lonBelegnummer <> 0 Then '[IF 1]
        ' aufrufen der Projektbeschreibung
        DoCmd.OpenForm "frmanfragenbestellungen"
    End If
End If
End Function


Function funMenDirOpen(Optional ProNr_)
'Öffnet das zu dem Projekt gehörende Verzeichnis
Dim txtSp1 As String
Dim rs1 As DAO.Recordset
Dim ProNr As Long
Dim strDir1 As String
Dim strDir2 As String
Dim strLauf As String
Dim Abbr As Boolean
Dim strSql As String

   
If IsMissing(ProNr_) Then
    ProNr = funProjektNummer()
Else
    ProNr = Val(ProNr_)
End If

'lonProjektnummer = ProNr
Abbr = False

If ProNr = 0 Then Exit Function

'Nachschauen ob Verzeichnis zum Projekt besteht
strSql = "SELECT tblProjekte.Verzeichnis, tblProjekte.ProjektNr, tblAdressen.Rufname " & _
    "FROM tblAdressen INNER JOIN tblProjekte ON tblAdressen.AdressNr = tblProjekte.AdressNr " & _
    "WHERE (tblProjekte.ProjektNr= " & Str(ProNr) & ");"
Set rs1 = CurrentDbC.OpenRecordset(strSql, dbOpenDynaset, dbSeeChanges)
    
   
    
'Verzeichnis besteht Explorer wird aufgerufen
If Nz(rs1!Verzeichnis) <> "" Then
    If Dir(rs1!Verzeichnis, vbDirectory) <> "" Then
        Shell "explorer.exe " & rs1!Verzeichnis, vbNormalFocus
        rs1.Close
        Set rs1 = Nothing
        
        funChangeProDir (ProNr)
        Exit Function
    End If
End If

strLauf = Left(funDirProjekte(), 3)   '"z:\"
strDir1 = Mid(funDirProjekte(), 4, 150) & "\" & rs1!Rufname & "\"  '"Aa_p\" & Rs1!Rufname & "\"
strDir2 = "P" & CStr(ProNr) & "\"

Select Case MsgBox(LA("Es gibt noch kein Projekt Verzeichnis.") & vbCrLf & _
        LA("Unter : ") & funDirProjekte() & vbCrLf & _
        LA("Soll für das Projekt:") & Str(ProNr) & vbCrLf & _
        LA("das Verzeichnis automatisch unter :") & txtSp1 & LA(" erstellt werden?") _
        , vbYesNoCancel, "Sicherheitsabfrage")
  
    Case vbYes
        'Verzeichnis anlegen
        ChDrive (Left(funDirProjekte(), 2))
        ChDir ("\")
        'prüft ob das Kundenverzeichnis vorhanden ist
        txtSp1 = Dir(strLauf & strDir1, vbDirectory)
        If txtSp1 <> "." Then
            ChDir (Mid(funDirProjekte(), 4, 150))
            MkDir (rs1!Rufname)  'txtSp1)
            ChDir (rs1!Rufname)
            Abbr = True
        End If
        'Prüft ob Projektverzeichnisvorhanden
        txtSp1 = Dir(strLauf & strDir1 & strDir2, vbDirectory)
        If txtSp1 <> "." Then
            If Abbr = False Then
                ChDir (Mid(funDirProjekte(), 4, 150))       '    "aa_p")
                ChDir (rs1!Rufname)
            End If
            MkDir ("P" & CStr(ProNr))
        End If
        rs1.Edit
        rs1!Verzeichnis = strLauf & strDir1 & strDir2
        rs1.Update
        rs1.Close
        Set rs1 = Nothing
        Shell "explorer.exe " & strLauf & strDir1 & strDir2, vbNormalFocus
        'Exit Function

    Case vbNo
        If MsgBox(LA("Wollen Sie selbst ein Verzeichnis auswählen?"), vbYesNoCancel, "Selbst ein Verzeichnis") = vbYes Then
            txtSp1 = funVerzeichnisAuswaehlen(funDirProjekte())
            If txtSp1 <> "" Then
                rs1.Edit
                rs1!Verzeichnis = txtSp1
                rs1.Update
                rs1.Close
                Set rs1 = Nothing
                Shell "explorer.exe " & txtSp1, vbNormalFocus
            End If
         Exit Function
       End If 'Msg Box
     Case Else
       Exit Function
       
       
End Select
'RS1.Close
'Set RS1 = Nothing
    
funChangeProDir (ProNr)

End Function

Function funMenDirNew()
Dim txtSp1 As String
Dim rs1 As DAO.Recordset
Dim ProNr As Long
'on error Goto Err_
   
ProNr = funProjektNummer
If ProNr <> 0 Then
    'Nachscauen ob Verzeichnis zum Projekt besteht
    Set rs1 = CurrentDbC.OpenRecordset("SELECT ProjektNr, Verzeichnis " & _
        "FROM tblProjekte WHERE (tblProjekte.ProjektNr= " & Str(ProNr) & ");")
   If modAbfrage("Wollen Sie das bestehnde Verzeichnis:" & vbCrLf & rs1!Verzeichnis & vbCrLf & "überschreiben?") Then
        txtSp1 = funVerzeichnisAuswaehlen(funDirProjekte())
        If txtSp1 <> "" Then
            rs1.Edit
            rs1!Verzeichnis = txtSp1
            rs1.Update
            'rs1.Close
            'Set rs1 = Nothing
            Shell "explorer.exe " & txtSp1, vbNormalFocus
            Exit Function
        Else  ' Wenn keins wird gelöscht
            If modAbfrage("Wollen Sie das bestehnde Verzeichnis:" & _
                vbCrLf & rs1!Verzeichnis & vbCrLf & "Löschen?") Then
                rs1.Edit
                rs1!Verzeichnis = ""
                rs1.Update
            End If
            Exit Function
        End If
    End If
    rs1.Close
    Set rs1 = Nothing
End If

Exit Function
Err_:
    MsgBox (Err.Description)
End Function


Function funMenProDokuInfo()
Dim ProNr As Long

'ProNr = funProNr()
'lonProjektnummer = ProNr
If funProjektNummer <> 0 Then
    DoCmd.OpenForm "frmDokuInfo"
End If

End Function

Function funMenArtikel()
'on error Goto Err_Artikel_Click
    DoCmd.OpenForm "frmArtikel"
Exit_Artikel_Click:
    Exit Function
Err_Artikel_Click:
    MsgBox Err.Description
    Resume Exit_Artikel_Click
End Function

Function funMenAlleDokumente()
    DoCmd.OpenForm "frmDokuInfoAlle"
End Function

Function funMenWarenannahme()
    DoCmd.OpenForm "frmWarenannahme"
End Function

Function funMenRechnungsStatistik()
DoCmd.OpenForm "frmRechnungsStatistik"
End Function

Function funMenberArbeitszeitProjek()
    'DoCmd.OpenReport "berArbeitszeitProjekt", acViewPreview, , , acDialog
    DoCmd.OpenForm "frmArbeitenRech"
    
End Function
Function funMenToDo()
    'DoCmd.OpenReport "berArbeitszeitProjekt", acViewPreview, , , acDialog
    DoCmd.OpenForm "frmPsToDo"
    
End Function

Function funMenQuick()
    'DoCmd.OpenReport "berArbeitszeitProjekt", acViewPreview, , , acDialog
    DoCmd.OpenForm "frmQuickCode"
    
End Function



Function funBerichte()
    DoCmd.OpenForm "frmBerichte"
End Function

Function funMenNotizenUebersicht()
    DoCmd.OpenForm "frmNotizenUebersicht"
End Function
Function funMenNotizenProjekt()
Dim ProNr As Long
'on error Goto Err_
ProNr = funProNr
'Die Projektnummer wir als 2 Objekt im Open Arg zugewiesen
If ProNr <> 0 Then
    DoCmd.OpenForm "frmNotizen", , , , , , ";" & CStr(ProNr) & ";;"
End If
Exit Function
Err_:
MsgErr "modmenue", "funMenNotizen", Err.Description, Err.Number, Err.Erl
End Function
Function funMenNotizenAdresse()
    DoCmd.OpenForm "frmNotizen", , , , , acDialog
End Function

'------------------------------------------------------------------
' Diese Funktion ermöglicht das aufteilen des OpenArgs in mehrerer Felder
' PosNr ist die Nummer des Textes der ausgelesen werden soll 1 ist der erste Text
' strOpenArgs ist der String der übergeben wird als Trennzeichen wird ein ; (Semikolon) verwendet
' Bsp. lonPosNr=2 strOpenArgs = "frmTest;123xy;Datenfeld"   das ergebis = "123xy"

Function funOpenArgs(lonPosNr As Long, strOpenArgs As String) As String
Dim z1 As Long
Dim zP1 As Long
Dim zP2 As Long
    'Wenn kein Wert übergeben
    If Nz(strOpenArgs) = "" Then
        funOpenArgs = ""
        Exit Function
    End If
    zP1 = 1
    zP2 = 0
        
    For z1 = 1 To Len(strOpenArgs)
        If Mid(strOpenArgs, z1, 1) = ";" Then
            zP2 = zP2 + 1
                'Wenn Wert gefunden und inhalt
                If zP2 = lonPosNr Then
                    funOpenArgs = Mid(strOpenArgs, zP1, z1 - zP1)
                    Exit Function
                Else
                    zP1 = z1 + 1
                End If
        End If
    Next
    
   zP1 = zP1
    
    'Wenn der 1 Wert gemeint ist und kein Komma gefunden
    If (Len(strOpenArgs) > 0) And (lonPosNr = 1) Then
        funOpenArgs = strOpenArgs
        Exit Function
    End If
    'Wenn keineAuswertung zutrifft
    funOpenArgs = ""
        
End Function







'####################################################

Function funMenConTrolAUF()
DoCmd.OpenForm "frmCTmain"
End Function
Function funMenConTrolALL()
DoCmd.OpenForm "frmConTrolALL"
End Function
Function funMenOldStart()
DoCmd.OpenForm "frmStartOriginal"
End Function
Function funMenConTrolAB()
DoCmd.OpenForm "frmConTrol_AB"
End Function
Function funMenConTrolDB()
DoCmd.OpenForm "frmConTrol_DB"
End Function
Function funMenConTrolP()
DoCmd.OpenForm "frmConTrol_P"
End Function
Function funMenConTrolLiqui()
DoCmd.OpenForm "frmConTrol_Liqui"
End Function
Function funMenAufwandP()
DoCmd.OpenForm "frmAufwand_P"
End Function
Function funMenAufwandsbA()
DoCmd.OpenForm "frmAufwand_sbA"
End Function
Function funMenAufwandAbs()
DoCmd.OpenForm "frmAufwand_Abs"
End Function
Function funMenAufwandZiSt()
DoCmd.OpenForm "frmAufwand_ZiSt"
End Function
Function funMenStammdaten()
DoCmd.OpenForm "NaviStammdaten"
End Function
Function funMenInfo()
    DoCmd.OpenForm "naviPSExplorer", , , , , acDialog
End Function
Function funMenAblage()
    DoCmd.OpenForm "f_AblageTemp"
End Function

Function funBerAufnichtAbge()
    DoCmd.OpenReport "berAufnichtAbge01", acViewPreview
    
End Function

Function funFrmFinanzen()
    DoCmd.OpenForm "FrmFinanzen"
End Function

Function funMenAlleAngebote()
    DoCmd.OpenForm "frmAngeboteListe"
End Function

'#######################################################
Function funMenVKRechnungen()
'on error Goto Err_
    DoCmd.OpenForm "frmRechnungsStatistik"
Exit_:
Exit Function
Err_:
MsgErr "TasteRechnungsStatistik_Click", "Form_frmFinanzen", Err.Description, Err.Number, Erl()
Resume Exit_
End Function

Function funMenEKRechnungen()
'on error Goto Err_
    DoCmd.OpenForm "frmfakErListe"
Exit_:
Exit Function
Err_:
MsgErr "TasteLieferantenRechnungenEingeben_Click", "Form_frmFinanzen", Err.Description, Err.Number, Erl()
Resume Exit_
End Function

Function funMenArtGrupp()
DoCmd.OpenForm "frmArtikelStueckliste"
End Function

Function funMenDateblaetter()
    DoCmd.OpenForm "frmArtikelDatenblaetter"
End Function

Function funMenAbeitenNichtBerechnet()
    DoCmd.OpenForm "frmArbeitenNichtBerechnet"
End Function

Function funMenTerminplanung()
    DoCmd.OpenForm "frmCOProjektstatus"
End Function
Function funMenWinAbmelden(Optional lngExitVal As Long)
    If Nz(lngExitVal, 0) = 0 Then lngExitVal = 0
    funMenWinAbmelden = apiExitWindowsEx(lngExitVal, 0)
End Function

Function funPSimWeb()
'Ruft PS im Web auf
'on error Goto Err_

Application.FollowHyperlink "http://www.dieprojektsoftware.de/?Download", , True
'Shell "internet explorer.exe " & Me!Webadresse, vbMaximizedFocus

Exit Function
Err_:
    MsgErr "TasteWeb_Click", "Form_frmAdresse", Err.Description, Err.Number, Erl()
End Function
Function funPSForum()
'Ruft PS im Web auf
'on error Goto Err_

Application.FollowHyperlink "http:\\www.dieprojektsoftware.de/?Forum", , True
'Shell "internet explorer.exe " & Me!Webadresse, vbMaximizedFocus

Exit Function
Err_:
    MsgErr "TasteWeb_Click", "Form_frmAdresse", Err.Description, Err.Number, Erl()
End Function

Function funBerichteimp()
    DoCmd.OpenForm "naviCopyBerichte"

End Function




  

Public Function funPopUPArtikel_10()
'Refresh Daten neu aus der Artikeldatenbank laden
'Refresht den Artikel wird aufgerufen vom Kontexmenue
'Die Nr 10 kommt aus der Festlegung in der Menue Tabelle
Dim rs1 As DAO.Recordset
Dim Rs2 As DAO.Recordset
Dim MutterMenge As Double
Dim GruppeMenge As Double
Dim sSql As String
Dim liD As Long


        
    If PopUpArtikelObj Is Nothing Then
        MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
        Exit Function
    End If
        
        PSDebug "PopUPArtikel 10"
        
        With PopUpArtikelObj
            Select Case .ZielTabelleName
                Case "tblStueckliste"
                
                'Feststellen ob Mutter mit Kindern wenn Ja Kinder und Mutter Refreshen
                If isStuecklisteMutterMitKinder(.ZielTabelleID) Then
                    'Wenn wir hier sind werden auch alle Kinder Refresht
                    MsgBox LA("Sie wollen eine Mutter refreshen, es weren auch alle Kinder refresht!"), vbMsgBoxHelpButton, "INFO", "www.help.dieprojektsoftware.de/", 1
                    'Erst mal nur die  Mutter refreshen
                    StuecklisteArtikelRefresh .ZielTabelleID, -1, .ID
                    
                     'öffne Einkaufsliste nur die Mutter
                    sSql = "SELECT * FROM tblStueckliste WHERE Mutter_ID_Stueck = " & .ZielTabelleID & " AND ID_Nummer=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)
                    'Lese Menge von Mutter
                    If Not rs1.EOF Then
                        MutterMenge = Nz(rs1.Fields("Menge").Value, 0)
                        PSDebug "Menge:" & MutterMenge & "Anzahl=" & rs1.RecordCount
                    End If
                                        
                    'Die Artikel die der Mutter beim einfügen zugeordnet wurden, nicht die Teile in der Gruppe
                    sSql = "SELECT * FROM tblStueckliste WHERE Mutter_ID_Stueck = " & .ZielTabelleID & " AND NOT ID_Nummer=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)
                    If Not rs1.EOF Then
                        rs1.MoveLast
                        rs1.MoveFirst
                    End If
                    PSDebug "Artikel in EK Liste:" & rs1.RecordCount
                    

                    
                    
                    'Durchlaufe Einkaufsliste Artikel und refreshe mit angepaster Menge
                    While Not rs1.EOF
                        'Abfangen wenn die Artikel ID 0 ist
                        If Nz(rs1.Fields("ArtikelID").Value, -3) = -3 Then
                            rs1.Edit
                                rs1.Fields("ST_Check").Value = "KEIN Artikel mehr"
                                rs1.Fields("Menge").Value = 0
                            rs1.Update
                        Else
                            'Die Mengedie in der Gruppen Liste gespeichert ist
                            GruppeMenge = Nz(DLookup("menge", "tblArtikelgruppen", "Artikel_Nr_Mutter=" & .ID & " AND Artikel_Nr_Kind=" & rs1.Fields("ArtikelID").Value), -2)
                            If GruppeMenge = -2 Then
                                ' Rs1!ST_Check = "gelöscht"
                                'in der Einkaufsliste steht 0 damit der User überlegen kann ob er löschen wll
                            Else
                                GruppeMenge = MutterMenge * GruppeMenge
                            End If
                            
                            StuecklisteArtikelRefresh rs1.Fields("ID_Nummer").Value, _
                                                GruppeMenge, _
                                                Nz(rs1.Fields("ArtikelID").Value, 0)
                        End If
                        


                                                
            
                        rs1.MoveNext
                    Wend
                    
                    
                    
                    'Jetzt ergänze noch die Artikel die fehlen
                    'Öffne CAD Stueckliste
                    sSql = "SELECT * FROM tblArtikelgruppen WHERE Artikel_Nr_Mutter=" & .ID & " ORDER By Artikel_Nr_Kind"
                    Set Rs2 = CurrentDbC.OpenRecordset(sSql)
                    If Not Rs2.EOF Then
                        Rs2.MoveLast
                        Rs2.MoveFirst
                    End If
                    
                    PSDebug "Anzahl Kinder:" & Rs2.RecordCount
                    
                    While Not Rs2.EOF
                        liD = Nz(DLookup("id_nummer", "tblStueckliste", "Mutter_ID_Stueck=" & .ZielTabelleID & " AND Artikelid=" & Rs2!Artikel_Nr_Kind), -1)
                        PSDebug "Mutter_ID_Stueck=" & .ZielTabelleID & "Artikelid=" & Rs2!Artikel_Nr_Kind
                        If liD = -1 Then  'Einen Entdeckt und jetzt anfügen
                            PSDebug "STOP Artikelid=" & Rs2!Artikel_Nr_Kind
                            GruppeMenge = Rs2.Fields("menge").Value
                            StuecklisteArtikelRefresh -1, _
                                                            GruppeMenge * MutterMenge, _
                                                            Rs2!Artikel_Nr_Kind, _
                                                            .ZielTabelleID, _
                                                            .ID
                        End If
                        Rs2.MoveNext
                    Wend
                    
                    rs1.Close
                    Rs2.Close
                Else
                    'Ferfresh mit Funktion nur diesen Einen Artikel
                    StuecklisteArtikelRefresh .ZielTabelleID, -1, .ID
                End If
                    
'                    'In der Stückliste den Datensatz refreshen aus der Artikeldatenbank
'                    sSql = "SELECT * FROM tblStueckliste WHERE ID_Nummer=" & .ZielTabelleID
'                    Set Rs1 = CurrentDbC.OpenRecordset(sSql)
'
'                    If Not Rs1.EOF Then
'                        Rs1.Edit
'                            Rs1!Projektnummer = .Projektnummer
'                            Rs1!Lieferant_Adress_Nr = .Lieferant  'mPS.AdresseIDVonRufname(.Lieferant)      'Adresnummer des Lieferanten
'                            Rs1!Lieferant = mPS.AdresseRufNameVonID(.Lieferant) 'Holt den Rufname aus der Adresstabelle
'                            'Rs1!Beschreibung = .Beschreibung    'für die Bestellung wird übernommen
'                            Rs1!BesondereVereinbarung = .BeschreibungB
'                            Rs1!Bestell_Nr = .Bestellnummer
'                            Rs1!PreisStueck = .Preis_EK_mit_Rabatt '   Nz(Rs1!Preis_EK_mit_Rabatt)
'                            Rs1!PreisBrut = .Preis_EK
'                            Rs1!Rabatt = .Preis_Rabatt_pro
'                            Rs1!GF_Bezeichnung = .Bezeichnung
'                            Rs1!ST_MinKosten = .ArtMinPreis
'                            Rs1!St_MaxKosten = .ArtMaxPreis
'                            Rs1!CAD_Index = .CAD_Index
'                        Rs1.Update
'
'                    End If
'                    Rs1.Close
                Case "tblAufPositionen"
                    'die Auflistung die Im Auftrag steht #################
                    sSql = "SELECT * FROM tblAufPositionen WHERE ID=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)

                    If Not rs1.EOF Then
                        rs1.Edit
                            rs1!Pos_Bezeichnung = .Bezeichnung
                            rs1!Pos_Beschreibung = .Beschreibung
                            rs1!Einheit = .Liefereinheit
                            rs1!Preis_einzeln = IIf(.PreisAuswahl = 0, .Preis_VK, .Preis_EK_mit_Rabatt)  '.Preis_VK   'Oder EK mit Rabatt? Oder EK_Liste
                            rs1!Preis_VK = rs1!Preis_einzeln * (1 + Nz(rs1!Einzel_Kalkulation, 0) / 100)
                            rs1!Preis_Summe = rs1!Preis_VK * rs1!Anzahl_Menge
                            
                        rs1.Update
                    End If
                    rs1.Close
                   
                   
                    
                Case "tblProjektbeschreibung"
                    'die Auflistung der Dokumente in der Kalkulation #################
                    sSql = "SELECT * FROM tblProjektbeschreibung WHERE ID=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)






                    If Not rs1.EOF Then
                        rs1.Edit
                            rs1!Pos_Bezeichnung = .Bezeichnung
                            rs1!Pos_Beschreibung = .Beschreibung
                            rs1!Einheit = .Liefereinheit
                            rs1!Anzahl_Menge = Nz(rs1!Anzahl_Stueck, 0) * Nz(rs1!Anzahl_Teile, 0)
                            rs1!Preis_einzeln = IIf(.PreisAuswahl = 0, .Preis_VK, .Preis_EK_mit_Rabatt) '   EK_mit Rabatt? Oder EK_Liste
                            rs1!Preis_VK = rs1!Preis_einzeln * (1 + Nz(rs1!Einzel_Kalkulation, 0) / 100)
                            rs1!Preis_Summe = rs1!Preis_VK * rs1!Anzahl_Menge
                            rs1!Lieferzeit = .Liefezeit
                            'Rs1!St_Preis_VK = .Preis_VK
                            
                        rs1.Update
                    End If
                    rs1.Close
               
                Case "tblProjektbeschreibungDokumente"
                    'Stop
                    'die Auflistung der Dokumente in den Anschreiben gilt auch für Auftrag #################
                    sSql = "SELECT * FROM tblProjektbeschreibungDokumente WHERE ID=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)

                    If Not rs1.EOF Then
                        rs1.Edit
                            rs1!Pos_Bezeichnung = .Bezeichnung
                            'ANBeschreibung
                            rs1!Pos_Beschreibung = .Beschreibung
                            rs1!Einheit = .Liefereinheit
                            'RS1!Anzahl_Menge = Nz(RS1!Anzahl_Stueck, 0) * Nz(RS1!Anzahl_Teile, 0)
                            rs1!Preis_einzeln = IIf(.PreisAuswahl = 0, .Preis_VK, .Preis_EK_mit_Rabatt) '.Preis_VK   'Oder EK mit Rabatt? Oder EK_Liste
                            rs1!Preis_VK = rs1!Preis_einzeln * (1 + Nz(rs1!Einzel_Kalkulation, 0) / 100)
                            
                            rs1!Preis_Summe = rs1!Preis_VK * rs1!Anzahl_Menge
                            rs1!Lieferzeit = .Liefezeit
                            'Rs1!St_Preis_VK = .Preis_VK
                            
                        rs1.Update
                    End If
                    rs1.Close
               
               Case "tblStuecklisteBestellung"
                    sSql = "SELECT * " & _
                             "FROM tblStuecklisteBestellung WHERE SbID = " & .ZielTabelleID
                    
                    Set rs1 = CurrentDbC.OpenRecordset(sSql) 'Tabelle in die die Daten geschrieben werden
                    
                    If Not rs1.EOF Then
                        rs1.Edit
                            rs1!GF_Bezeichnung = .Bezeichnung
                            rs1!Bestell_Nr = .Bestellnummer
                            'Rs1!Menge = .M
                            rs1!Liefereinheit = .Liefereinheit
                            rs1!PreisStueck = .Preis_VK
                            rs1!BesondereVereinbarung = .BeschreibungB
                            rs1!Besteller = PS.User.Kurzzeichen
                            'Me!ArtikelID = Rs1!ArtikelID
                            rs1!Rabatt = .Preis_Rabatt_pro
                            rs1!PreisBrut = .Preis_EK_mit_Rabatt
                            
                            'Me!Gruppe = Rs1!Gruppe
                        rs1.Update
                    End If
                    rs1.Close
                      
               
               
               

               
                    

            End Select
        End With
        
        Set PopUpArtikelObj = Nothing
        
        
End Function
Public Function funPopUPArtikel_11()
'Artikel Neu aus dem vorhandenen erstellen die Artikelnummer wird neu generiert
'Die Nr 11 kommt aus der festlegung in der Menue Tabelle
Dim pufNeuAnlegenID As Long
Dim sSql As String
Dim rs1 As DAO.Recordset

        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        With PopUpArtikelObj   'Objekt bezieht sich alles auf Artikel
        
            'Man muss die Felder auslesen aus den Tabellen die verwendet werden sollen
            Select Case .ZielTabelleName
                Case "tblStueckliste"
                    'In der Stückliste den Datensatz suchen und aus diesem einen neuen Artikel erzeugen
                    'ZielTabelleID is hier Quasie die Quelle
                    sSql = "SELECT * FROM tblStueckliste WHERE ID_Nummer=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)
                    
                        If Not rs1.EOF Then
                            .Lieferant = rs1!Lieferant_Adress_Nr        'Adresnummer des Lieferanten
                            '.LieferantRufnameEXT = Rs1!Lieferant        'Holt den Rufname aus der Adresstabelle
                            'Rs1!Beschreibung = .Beschreibung           'für die Bestellung wird übernommen
                            .Bezeichnung = rs1!GF_Bezeichnung
                            .BeschreibungB = Nz(rs1!BesondereVereinbarung, " ")
                            .Bestellnummer = rs1!Bestell_Nr
                            .Liefereinheit = rs1!Liefereinheit
                            .PreisLiefereinheit = Nz(rs1!PreisBrut, 0)
                            .LieferMenge = 1
                            .Preis_EK_mit_Rabatt = rs1!PreisStueck      'Nz(Rs1!Preis_EK_mit_Rabatt)
                            .Preis_EK = Nz(rs1!PreisBrut, 0)
                            .Preis_Rabatt_pro = Nz(rs1!Rabatt, 0)
                            .Bezeichnung = rs1!GF_Bezeichnung
                            .ArtMinPreis = Nz(rs1!ST_MinKosten, 0)
                            .ArtMaxPreis = Nz(rs1!St_MaxKosten, 0)
                            
                        'Und zum schluss die ID Anpassen
                        pufNeuAnlegenID = .NeuAnlegen
                        PSDebug "PopUPArtikel 11 neue ID:" & pufNeuAnlegenID
        
                        If pufNeuAnlegenID > 0 Then  '
                            'Neu anlegen hat funktioniert Ziel Artikel ID zuweisen
                            rs1.Edit
                                rs1!ArtikelID = pufNeuAnlegenID  'ID von dem neue Datensatz
                            rs1.Update
                        Else
                            MsgBox LA("Fehler beim anlegen " & pufNeuAnlegenID)
                        End If
                            
                    End If
                    rs1.Close
                    
                    
                Case "tblAufPositionen"
                 ' Stop
                  '  Exit Function 'noch nicht ok
                    'die Auflistung die Im Auftrag steht und der Kopf #################
                    'sSql = "SELECT * FROM tblAufPositionen WHERE ID=" & .ZielTabelleID
                    sSql = "SELECT tblAufDaten.*, tblAufPositionen.* " & _
                           "FROM tblAufPositionen INNER JOIN tblAufDaten ON tblAufPositionen.Auftragsnummer = tblAufDaten.ID " & _
                           "WHERE tblAufPositionen.ID = " & .ZielTabelleID   '4132"
                    
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)
                    If rs1!fiAnschreibenAdresse = 0 Then
                        MsgBox LA("Keine Adresse gewählt!")
                    Else
                        If Not rs1.EOF Then
                            .Lieferant = rs1!fiAnschreibenAdresse        'Adresnummer des Lieferanten ode des Kunden für den der Artikel ist
                            '.LieferantRufnameEXT = mPS.funAressnummerRufname(Rs1!fiAnschreibenAdresse)         'Holt den Rufname aus der Adresstabelle
                            .Bezeichnung = rs1!Pos_Bezeichnung
                            .BeschreibungB = Nz(rs1!Pos_Beschreibung, "")  'Kopiert in Beschreibung Bestellun
                            .Beschreibung = Nz(rs1!Pos_Beschreibung, "")   'Kopiert in Beschreibung Angebot
                            '.Bestellnummer = Rs1!Bestell_Nr
                            .Liefereinheit = rs1!Einheit
                            .Preis_EK_mit_Rabatt = rs1!Preis_einzeln      'Nz(Rs1!Preis_EK_mit_Rabatt)
                            .Preis_EK = rs1!Preis_einzeln
                            .Preis_Rabatt_pro = 0
                            '.Bezeichnung = Rs1!GF_Bezeichnung
                            '.ArtMinPreis = Nz(Rs1!ST_MinKosten, 0)
                            '.ArtMaxPreis = Nz(Rs1!St_MaxKosten, 0)
                            
                        'Und zum schluss die ID Anpassen
                        pufNeuAnlegenID = .NeuAnlegen
                        PSDebug "PopUPArtikel 11 neue ID:" & pufNeuAnlegenID
        
                        If pufNeuAnlegenID > 0 Then  '
                            'Neu anlegen hat funktioniert Ziel Artikel ID zuweisen
                            rs1.Edit
                                rs1!ArtikelID = pufNeuAnlegenID  'ID von dem neue Datensatz
                            rs1.Update
                        Else
                            MsgBox LA("Fehler beim anlegen " & pufNeuAnlegenID)
                        End If
                            
                        End If
                    rs1.Close
                   End If 'Prüfen Adresse 0
                   
                    
                Case "tblProjektbeschreibung"
                    'Exit Function  'noch nicht ok
                    'die Auflistung der Dokumente in den Anschreiben #################
                    sSql = "SELECT * FROM tblProjektbeschreibung WHERE ID=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)
Stop
                    If Not rs1.EOF Then
                            .Bezeichnung = rs1!Pos_Bezeichnung
                            .Beschreibung = rs1!Pos_Beschreibung
                            .Liefereinheit = rs1!Einheit
                            .Preis_VK = rs1!Preis_einzeln      'Oder EK mit Rabatt? Oder EK_Liste
                            'rs1!Preis_Summe = .Preis_VK * rs1!Anzahl_Menge
                            'rs1!Lieferzeit = .Liefezeit
                            'Rs1!St_Preis_VK = .Preis_VK
                            'rs1!Preis_VK = rs1!Anzahl_Menge * .Preis_VK
                            
                            'Und zum schluss die ID Anpassen
                        pufNeuAnlegenID = .NeuAnlegen
                                                    If pufNeuAnlegenID > 0 Then  '
                            'Neu anlegen hat funktioniert Ziel Artikel ID zuweisen
                            rs1.Edit
                                rs1!ArtikelID = pufNeuAnlegenID  'ID von dem neue Datensatz
                            rs1.Update
                        Else
                            MsgBox LA("Fehler beim anlegen " & pufNeuAnlegenID)
                        End If
                    End If
                    rs1.Close
                Case "tblProjektbeschreibungDokumente"
                    'die Auflistung der Dokumente in den Anschreiben #################
                    sSql = "SELECT * FROM tblProjektbeschreibungDokumente WHERE ID=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)

                    If Not rs1.EOF Then
                        'RS1.Edit
                            .Bezeichnung = rs1!Pos_Bezeichnung
                            .Beschreibung = rs1!Pos_Beschreibung
                            .Liefereinheit = rs1!Einheit
                            'RS1!Anzahl_Menge = Nz(RS1!Anzahl_Stueck, 0) * Nz(RS1!Anzahl_Teile, 0)
                            .Preis_VK = rs1!St_Preis_VK     'Oder EK mit Rabatt? Oder EK_Liste
                            .Preis_VK = rs1!Preis_VK ' * RS1!Anzahl_Menge
                            .Liefezeit = rs1!Lieferzeit
                            'Rs1!St_Preis_VK = .Preis_VK
                            
                            
                            'Und zum schluss die ID Anpassen
                            pufNeuAnlegenID = .NeuAnlegen
                            PSDebug "PopUPArtikel 11 neue ID:" & pufNeuAnlegenID
        
                            If pufNeuAnlegenID > 0 Then  '
                                'Neu anlegen hat funktioniert Ziel Artikel ID zuweisen
                                rs1.Edit
                                    rs1!ArtikelID = pufNeuAnlegenID  'ID von dem neue Datensatz
                                rs1.Update
                            Else
                                MsgBox LA("Fehler beim anlegen " & pufNeuAnlegenID)
                            End If
                               
                        'RS1.Update
                    End If
                    rs1.Close
                    

            End Select
              
        
        
        

            

        End With
        
End Function
Public Function funPopUPArtikel_12()
'Artikel Info
'Refresht den Artikel wird aufgerufen vom Kontexmenue
'Die Nr 12 kommt aus der festlegung in der Menue Tabelle
        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        PSDebug "PopUPArtikel 12"
        
        With PopUpArtikelObj
            DoCmd.OpenForm "frmArtikelInfo", , , "ID=" & .ZielArtikelID
            
        End With
        
        Set PopUpArtikelObj = Nothing
        
End Function

Public Function funPopUPArtikel_13()
'Artikel Info
'Mutter wird berechnet
'Die Nr 13 kommt aus der festlegung in der Menue Tabelle
        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        PSDebug "PopUPArtikel 13"
        
        With PopUpArtikelObj
            PS.Artikel.MutterBerechnen .ZielArtikelID, .Projektnummer
        End With
        
        Set PopUpArtikelObj = Nothing
        
End Function

Public Function funPopUPArtikel_14()
'Refresht den Artikel wird aufgerufen vom Kontexmenue
'Die Nr 14 kommt aus der festlegung in der Menue Tabelle
        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        'MsgBox ("PopUPArtikel14")
        With PopUpArtikelObj
            DoCmd.OpenForm "frmArtikelStueckliste" ', , , "ID=" & .ZielArtikelID
            'DoEvents
            Form_frmArtikelStueckliste.Artikel_Nr_Mutter_.Value = .ZielArtikelID
            Form_frmArtikelStueckliste.Artikel_Nr_Mutter__AfterUpdate
            
        End With
       Set PopUpArtikelObj = Nothing
    
        
End Function


Public Function funPopUPArtikel_16()
'Einfügen Alle Artikel von der Mutter
'Die Nr 16 kommt aus der festlegung in der Menue Tabelle
Dim pufNeuAnlegenID As Long
Dim sSql As String
Dim rs1 As DAO.Recordset
Dim Rs2 As DAO.Recordset

        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        PSDebug "PopUPArtikel 16 Nur Kopie von refresh 16.5.2019"
        
        
        With PopUpArtikelObj
        
                    'Man muss die Felder auslesen aus den Tabellen die verwendet werden sollen
            Select Case .ZielTabelleName
                Case "tblStueckliste"
                    'In der Stückliste den Datensatz suchen der zum neuanlegen in den Artikeln verwendet werden soll
                    'ZielTabelleID is hier Quasie die Quelle
                    
                    '1) Prüfe ob eingefügte Mutter Besteht
                        '- wird schon vorab geprüft
                    '2) prüfe ob Mutter schon erzeugt
                        
                    
                    '2) Suche alle Kinder
                        
                    '3) ein Kind nach dem andern einfügen add new
                    
                    'Stop
                    '
                    'sSql = "SELECT * FROM tblArtikelgruppen WHERE Artikel_Nr_Mutter=" & .ID
                    If isStuecklisteMutterMitKinder(.ZielTabelleID) Then
                        MsgBox LA("Die Artikelmutter wurde schon eingefügt")
                    Else
                    
                        sSql = "SELECT tblArtikel.*, tblArtikelgruppen.* " & _
                            "FROM tblArtikel INNER JOIN tblArtikelgruppen ON tblArtikel.ID = tblArtikelgruppen.Artikel_Nr_Kind " & _
                            "WHERE Artikel_Nr_Mutter = " & .ID & _
                            " ORDER BY Reihenfolge"
                        
                        Set rs1 = CurrentDbC.OpenRecordset(sSql)
                        
                        sSql = "SELECT * FROM tblStueckliste WHERE False"
                        Set Rs2 = CurrentDbC.OpenRecordset(sSql)
                           'Ale Artikel die der Mutter zugeordnet sind weren in die Stückliste eingefügt
                            While Not rs1.EOF
                                Rs2.AddNew
                                    Rs2!Projektnummer = .Projektnummer  'Von Stückliste
                                    'Rs2!Gruppe = .ID     'ID von Mutter
                                    Rs2!ArtikelID = rs1!Artikel_Nr_Kind
                                    Rs2!Lieferant_Adress_Nr = rs1!Lieferant       'Adresnummer des Lieferanten
                                    Rs2!Lieferant = mPS.AdresseRufNameVonID(rs1!Lieferant)
                                    'Die Menge ist der Produktwert die Multiplikation von Menge der Mutter * Menge der Kinder
                                    Rs2!Menge = rs1!Menge * Nz(DLookup("Menge", "tblStueckliste", "ID_Nummer=" & .ZielTabelleID), 1)
                                    Rs2!Liefereinheit = rs1!Liefereinheit
                                    '.LieferantRufnameEXT =         'Holt den Rufname aus der Adresstabelle
                                    'Rs1!Beschreibung = .Beschreibung           'für die Bestellung wird übernommen
                                    Rs2!GF_Bezeichnung = rs1!Bezeichnung
                                    Rs2!BesondereVereinbarung = Nz(rs1!BeschreibungB, " ")
                                    Rs2!Bestell_Nr = rs1!Bestellnummer
                                    Rs2!PreisStueck = rs1!Preis_EK_mit_Rabatt     'Nz(Rs1!Preis_EK_mit_Rabatt)
                                    Rs2!PreisBrut = rs1!Preis_EK
                                    Rs2!Rabatt = rs1!Preis_Rabatt_pro
                                    Rs2!GF_Bezeichnung = rs1!Bezeichnung
                                    Rs2!ST_MinKosten = Nz(rs1!ArtMinPreis, 0)
                                    Rs2!St_MaxKosten = Nz(rs1!ArtMaxPreis, 0)
                                    Rs2!Angelegt_von = PS.User.Kurzzeichen()
                                    Rs2!Besteller = PS.User.Kurzzeichen()
                                    Rs2!Angelegt_am = Now
                                    Rs2!AufNr = Nz(DLookup("AufNr", "tblStueckliste", "ID_Nummer=" & .ZielTabelleID), 0)
                                    'Stop
                                    Rs2!Status = mPS.StatusNeu(Rs2!ID_Nummer, 10, 0, "", "von Mutter eingefügt")
                                    
                                    '2019060 Neue Funktion soll das einfügen von Müttern und Kindern ermöglichen
                                    Rs2!Mutter_ID = .ID    'Die Artikelnummer der Mutter
                                    Rs2!Mutter_ID_Stueck = .ZielTabelleID 'Die ID der Zeile in der Stueckliste wo die Mutter steht
                                    
                                    
                                Rs2.Update
                                rs1.MoveNext
                            Wend
                            
                            rs1.Close
                            Rs2.Close
                            
                            'Setzt die Gruppe in der Stückliste der Mutter auch auf die ID der Mutter setzen
                            sSql = "SELECT gruppe, Mutter_ID, Mutter_ID_Stueck  FROM tblStueckliste WHERE ID_Nummer=" & .ZielTabelleID
                            Set rs1 = CurrentDbC.OpenRecordset(sSql)
                            
                            If Not rs1.EOF Then
                                rs1.Edit
                                    rs1.Fields("Gruppe").Value = .ID
                                    rs1.Fields("Mutter_ID").Value = .ID
                                    rs1.Fields("Mutter_ID_Stueck").Value = .ZielTabelleID
                                rs1.Update
                            End If
                            rs1.Close
                    End If
                            
                Case "xxtblAufPositionen"
                    Exit Function 'noch nicht ok
                    'die Auflistung die Im Auftrag steht #################
                    sSql = "SELECT * FROM tblAufPositionen WHERE ID=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)

                    If Not rs1.EOF Then
                        rs1.Edit
                            rs1!Pos_Bezeichnung = .Bezeichnung
                            rs1!Pos_Beschreibung = .Beschreibung
                            rs1!Einheit = .Liefereinheit
                            rs1!Preis_einzeln = .Preis_VK   'Oder EK mit Rabatt? Oder EK_Liste
                        rs1.Update
                    End If
                    rs1.Close
                   
                   
                    
                Case "xxtblProjektbeschreibungDokumente"
                    Exit Function  'noch nicht ok
                    'die Auflistung der Dokumente in den Anschreiben #################
                    sSql = "SELECT * FROM tblProjektbeschreibungDokumente WHERE ID=" & .ZielTabelleID
                    Set rs1 = CurrentDbC.OpenRecordset(sSql)

                    If Not rs1.EOF Then
                            rs1!Pos_Bezeichnung = .Bezeichnung
                            rs1!Pos_Beschreibung = .Beschreibung
                            rs1!Einheit = .Liefereinheit
                            rs1!St_Preis_VK = .Preis_VK   'Oder EK mit Rabatt? Oder EK_Liste
                            rs1!Preis_VK = rs1!Anzahl_Menge * .Preis_VK
                    End If
                    rs1.Close
               
            End Select

        End With
        
        
End Function


Public Function funPopUPArtikel_20()
    'Sucht nach einer PDF Datei die der Artikelnummer entspricht

        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        PSDebug "funPopUPArtikel_20 OPEN PDF "
        
        With PopUpArtikelObj
        
            pdfCadAnzeigen .ID
        
        End With
        
End Function


Public Function funPopUPArtikel_22()
        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        'MsgBox "funPopUPArtikel_22 OPEN CAd DFT "
        
        With PopUpArtikelObj
            DFTCadAnzeigen .ID
        End With
End Function


Public Function funPopUPArtikel_24()
    'Zeigt basierend auf dem Dateinamen die Zeichnung an
        If PopUpArtikelObj Is Nothing Then
            MsgBox "Programmfehler es muss ein Objekt vorhanden sein PS_Kontex"
            Exit Function
        End If
        
        'MsgBox "funPopUPArtikel_24 OPEN CAd 3D"
        
        With PopUpArtikelObj
            Cad3DAnzeigen .ID
        End With
        
        
End Function

Private Sub StuecklisteArtikelRefresh(ZielTabelleID As Long, _
                                        MengeArtikel As Double, _
                                        ArtikelID As Long, _
                                        Optional Mutter_ID_Stueck As Long, _
                                        Optional Mutter_ID As Long)

'Es wird der Artikel in der Einkaufsliste refresht
'20190606 ausglagert als sub um Sowohl den Einzelrefresh wie auch den refresh von der Mutter ausgehend um zu setzen
'Menge Mutter gibt die Menge an die eingekauft werden soll ist notwendig für das refreshen der Mutter.
'Bei einer Änderung der Menge der Mutter müssen alle Kinder entsprechend Ihrer Anzahl in der CAD Liste refresht werden
'bei einem -1 in der Menge bleibt die Menge unberührt -1 bei Einzelrefresh

'Wenn die Zieltabelle -1 ist ist der Artikel nicht vorhanden und soll neu angelegt werden

Dim sSql As String
Dim rs1 As DAO.Recordset
Dim oArtikel As Artikel
Dim NeuerDatensatz As Boolean
Set oArtikel = New Artikel


    If ZielTabelleID = -1 Then NeuerDatensatz = True
        


    With oArtikel
        .Laden (ArtikelID)
        PSDebug "Artikel.:" & ArtikelID & "MengeMutter:" & MengeArtikel
        'In der Stückliste den Datensatz refreshen aus der Artikeldatenbank
        If NeuerDatensatz Then
            sSql = "SELECT * FROM tblStueckliste WHERE FALSE"
        Else
            sSql = "SELECT * FROM tblStueckliste WHERE ID_Nummer=" & ZielTabelleID
        End If
        
        Set rs1 = CurrentDbC.OpenRecordset(sSql)
        
        
            If NeuerDatensatz Then
                rs1.AddNew
                    rs1!ST_Check = "Mit refresh ergänzt"
                    rs1!ArtikelID = ArtikelID
                    rs1!Mutter_ID = Mutter_ID
                    rs1!Mutter_ID_Stueck = Mutter_ID_Stueck
                    'Status muss auch angelegt werden
                    rs1!Status = mPS.StatusNeu(rs1!ID_Nummer, 10, 0, "", "Refresh von Mutter")
                    rs1!Besteller = PS.User.Kurzzeichen()
            Else
                If Not rs1.EOF Then
                    rs1.Edit
                Else
                    rs1.Close
                    Exit Sub
                End If
            End If
            
                rs1!Projektnummer = PopUpArtikelObj.Projektnummer
                rs1!Lieferant_Adress_Nr = .Lieferant  'mPS.AdresseIDVonRufname(.Lieferant)      'Adresnummer des Lieferanten
                rs1!Lieferant = mPS.AdresseRufNameVonID(.Lieferant) 'Holt den Rufname aus der Adresstabelle
                'Rs1!Beschreibung = .Beschreibung    'für die Bestellung wird übernommen
                rs1!BesondereVereinbarung = .BeschreibungB
                rs1!Bestell_Nr = .Bestellnummer
                rs1!Liefereinheit = Nz(.Liefereinheit, "St.")
                If Len(rs1!Liefereinheit) = 0 Then rs1!Liefereinheit = "St."
                rs1!PreisStueck = .Preis_EK_mit_Rabatt '   Nz(Rs1!Preis_EK_mit_Rabatt)
                rs1!PreisBrut = .Preis_EK
                rs1!Rabatt = .Preis_Rabatt_pro
                rs1!GF_Bezeichnung = .Bezeichnung
                rs1!ST_MinKosten = .ArtMinPreis
                rs1!St_MaxKosten = .ArtMaxPreis
                rs1!CAD_Index = .CAD_Index
                Select Case MengeArtikel
                    Case Is >= 0
                        rs1!Menge = MengeArtikel
                    Case -1
                        'mache nix
                    Case -2
                        'Der Datensatz existiert nicht mehr in der CAD Liste nur in der Stückliste
                        rs1!ST_Check = "gelöscht"
                        rs1!Menge = 0
                End Select
                
                
                
                
            rs1.Update
            
        rs1.Close
    End With
End Sub

Private Function isStuecklisteMutterMitKinder(ID_Stueckliste As Long) As Boolean
    'Prüft ob Mutter mit Kindern vorliegt

If DCount("Mutter_ID_Stueck", "tblStueckliste", "Mutter_ID_Stueck=" & ID_Stueckliste) > 1 Then
    isStuecklisteMutterMitKinder = True
Else
    isStuecklisteMutterMitKinder = False
End If

    
End Function



Function funAnBestDrucken()
MsgBox "funAnBestDrucken"
 'funDruck Me, "ber_BestellungAnfrage", True, True
End Function

Function funAnBestCode()
MsgBox "funAnBestCode"
'funDruck Me, "ber_BestellungWarenBegleitschein", True, True '    'funDruckFormWord Me, "_BestellungWarenBegleitschein",
End Function

Function funAnBestCopy()
MsgBox "funAnBestCopy"

Dim rs1 As DAO.Recordset
Dim z1 As Long
Dim strSp1 As String

Form_frmAnfragenBestellungen.varZA = ""

Set rs1 = CurrentDb.OpenRecordset("SELECT * FROM tblStuecklisteBestellung " & _
    "WHERE BelegNr = " & Form_frmAnfragenBestellungen.BelegNr & _
    "ORDER BY tblStuecklisteBestellung.Positionsnummer;")
    
If rs1.RecordCount <> 0 Then
    rs1.MoveFirst
    For z1 = 1 To rs1.RecordCount
        Form_frmAnfragenBestellungen.varZA = Form_frmAnfragenBestellungen.varZA & rs1!Bestell_Nr & "," & rs1!Menge & vbCrLf
        rs1.MoveNext
    Next z1
End If

rs1.Close
Set rs1 = Nothing

If IsNull(Form_frmAnfragenBestellungen.varZA) Then strSp1 = modMemofeld(" ") _
 Else: Form_frmAnfragenBestellungen.varZA = modMemofeld(Form_frmAnfragenBestellungen.varZA)
'Me!varZA = Wert1

Form_frmAnfragenBestellungen.varZA.SetFocus

Form_frmAnfragenBestellungen.varZA.SelStart = 0
Form_frmAnfragenBestellungen.varZA.SelLength = Len("" & Form_frmAnfragenBestellungen.varZA)
Form_frmAnfragenBestellungen.varZA.SetFocus
If Form_frmAnfragenBestellungen.varZA <> "" Then
    DoCmd.RunCommand 190  'acCmdCopy
End If

End Function

Function funAnBestEMail()
MsgBox "funAnBestEMail"

Dim d1 As String
Dim D2 As String
Dim s1 As String
Dim s2 As String


If Not Nz(DLookup("MailUse", "tblAdressenPersonal", "MailUse=true and Kurzzeichen='" & ModVariablen.funBenutzerKurzzeichen & "'"), False) Then
    MsgBox LA("E-Mail ist deaktiviert unter Menue/Personal/E-Mail")
    Exit Function
End If

With Form_frmAnfragenBestellungen

    'Standartvorlage über Mandant wenn der Mandant nicht gefunden wird wird der Standart verwendet
    s1 = berichtMandant("ber_BestellungAnfrage")
    
    
    'Prüfen Ob ein verzeichnis für die Ablage besteht
    d1 = funDirProjekteAnBe(Val(.Projektnummer))
    If d1 = "" Then
        If MsgBox("Sie müssen ein gültige Projektverzeichnis für die Anfragen und Bestellungen uneter [VerzeichnisAnBe] anlegen sonst funktioniert das nicht." & vbCrLf & "Wollen Sie direkt zur Eingabe wechseln?", vbYesNoCancel) = vbYes Then
            funMenProStam (.Projektnummer) 'Öffnet Projekt Details
        End If
        Exit Function
    End If
    'Erzeugen der Dateinamen für die Dokumente
    D2 = d1
    d1 = d1 & "\Bel-" & .Projektnummer & "-" & .BelegNr & "-" & .Rufname & "-" & .Beleg_Art & ".pdf"
    D2 = D2 & "\Bel-" & .Projektnummer & "-" & .BelegNr & "-" & .Rufname & "-WarenBegleitschein.pdf"
    d1 = Replace(d1, "/", "-")
    D2 = Replace(D2, "/", "-")
    
    'Vorbereiten der E-Mail Ausgabe
    If Nz(.EMail) = "" Then
        MsgBox (LA("Ohne EMail Adresse geht nix!"))
        Exit Function
    End If
    s2 = .Kopftext '& vbCrLf
    s2 = s2 & .Textstück '& vbCrLf
    s2 = s2 & .Schlusstext
    
    'Prüfe  SMTP oder Outlook aktiv ist
    If Nz(DLookup("AdressNr", "tblAdressenPersonal", "MailUserName='Outlook' and Kurzzeichen='" & ModVariablen.funBenutzerKurzzeichen & "'"), "0") = 0 Then
        'SMTP direkt Mail
        
        'Übergabe der Daten an E-Mail Formular
        DoCmd.OpenForm "frmEMail"
        
        Form_frmEMail.Form_Timer
        Form_frmEMail.varText = s2
        Form_frmEMail.varAbsender = ModVariablen.funBenutzerKurzzeichen
        Form_frmEMail.varBetreff = "P" & .Projektnummer & " " & .Betreff
        Form_frmEMail.varAn = .EMail
        
        'Abhämgig von der Beleg Art die Dokumente erzeugen
        If .Beleg_Art = "Bestellung" Then
            DoCmd.OutputTo acOutputReport, s1, acFormatPDF, d1
            DoCmd.OutputTo acOutputReport, "ber_BestellungWarenBegleitschein", acFormatPDF, D2
        
            Form_frmEMail.addAnhang = d1
            Form_frmEMail.addAnhang = D2
        Else
            DoCmd.OutputTo acOutputReport, s1, acFormatPDF, d1
            Form_frmEMail.addAnhang = d1
        End If
    
    Else
        'Outlook Mail
        
        DoCmd.OutputTo acOutputReport, s1, acFormatPDF, d1
            
        
        SendMailHTMLOutlook .EMail, "P" & .Projektnummer & " " & .Betreff, "Hier schreiben wir des zeug usw.", d1
    
    
    
    End If


End With


End Function

Function funAnBestEMailCAD()
MsgBox "funAnBestEMailCad"
End Function

Function funAnBestWord()
    MsgBox "funAnBestWord"
    funDruckFormWord Form_frmAnfragenBestellungen, "_BestellungAnfrage", ""
End Function